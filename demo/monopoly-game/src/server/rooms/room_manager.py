import asyncio
from ..utils.network_utils import create_udp_socket
from ..utils.port_checker import PortChecker

class RoomManager:
    """
    Qu·∫£n l√Ω c√°c ph√≤ng trong game Monopoly - ƒê√É S·ª¨A HO√ÄN TO√ÄN
    """

    def __init__(self, logger):
        self.logger = logger
        self.rooms = {}  # { room_id: {players, multicast_ip, port, socket} }
        self.port_checker = PortChecker(5000, 6000)
        self.port_checker.scan_ports()

    async def create_room(self, room_id: str):
        """T·∫°o ph√≤ng m·ªõi - CH·ªà tr·∫£ v·ªÅ th√¥ng tin c√≥ th·ªÉ serialize"""
        if room_id in self.rooms:
            self.logger.warning(f"‚ö†Ô∏è Room '{room_id}' already exists.")
            return None

        multicast_ip = f"224.1.1.{len(self.rooms) + 10}"
        port = self.port_checker.get_random_port()
        sock = create_udp_socket(multicast=True, port=port)

        # L∆∞u th√¥ng tin ƒë·∫ßy ƒë·ªß (c√≥ socket) trong internal storage
        self.rooms[room_id] = {
            "room_id": room_id,
            "multicast_ip": multicast_ip,
            "port": port,
            "socket": sock,  # socket object, kh√¥ng serialize ƒë∆∞·ª£c
            "players": []
        }

        self.logger.success(f"üè† Created room '{room_id}' on {multicast_ip}:{port}")
        
        # QUAN TR·ªåNG: Ch·ªâ tr·∫£ v·ªÅ th√¥ng tin c√≥ th·ªÉ serialize
        return {
            "room_id": room_id,
            "multicast_ip": multicast_ip,
            "port": port,
            "players": []
        }

    async def list_rooms(self):
        """Tr·∫£ v·ªÅ danh s√°ch ph√≤ng d∆∞·ªõi d·∫°ng dict c√≥ th·ªÉ serialize"""
        result = {}
        for rid, info in self.rooms.items():
            result[rid] = {
                "multicast_ip": info["multicast_ip"],
                "port": info["port"],
                "players": info["players"]  # Ch·ªâ c√°c field c√≥ th·ªÉ serialize
            }
        return result

    async def add_player(self, room_id: str, player_name: str):
        """Th√™m ng∆∞·ªùi ch∆°i v√†o ph√≤ng - Tr·∫£ v·ªÅ info c√≥ th·ªÉ serialize"""
        if room_id not in self.rooms:
            self.logger.warning(f"Room '{room_id}' not found.")
            return None

        room = self.rooms[room_id]
        if player_name not in room["players"]:
            room["players"].append(player_name)
            self.logger.info(f"üë§ {player_name} joined {room_id}")
        
        # QUAN TR·ªåNG: Ch·ªâ tr·∫£ v·ªÅ th√¥ng tin c√≥ th·ªÉ serialize
        return {
            "room_id": room_id,
            "multicast_ip": room["multicast_ip"],
            "port": room["port"],
            "players": room["players"].copy()  # Copy ƒë·ªÉ tr√°nh reference
        }

    async def remove_player(self, room_id: str, player_name: str):
        """X√≥a ng∆∞·ªùi ch∆°i kh·ªèi ph√≤ng"""
        if room_id in self.rooms and player_name in self.rooms[room_id]["players"]:
            self.rooms[room_id]["players"].remove(player_name)
            self.logger.info(f"üëã {player_name} left {room_id}")
            return True
        return False

    def get_room_info(self, room_id: str):
        """L·∫•y th√¥ng tin room (c√≥ socket) cho internal use"""
        return self.rooms.get(room_id)