import socket
import struct
import json
from typing import Tuple, Optional
from .port_checker import PortChecker

# ======================================================
# üåê GLOBAL PORT CHECKER (ch·ªâ qu√©t 1 l·∫ßn duy nh·∫•t)
# ======================================================
PORT_CHECKER = None


# ======================================================
# üß© UDP SOCKET CREATION
# ======================================================
def create_udp_socket(multicast: bool = False, port: int = 0) -> socket.socket:
    """
    T·∫°o UDP socket v√† t·ª± ƒë·ªông ch·ªçn port kh·∫£ d·ª•ng (n·∫øu port=0)
    """
    global PORT_CHECKER

    # Kh·ªüi t·∫°o PortChecker n·∫øu ch∆∞a c√≥
    if PORT_CHECKER is None:
        PORT_CHECKER = PortChecker(5000, 6000)
        PORT_CHECKER.scan_ports()

    # N·∫øu ch∆∞a c√≥ port ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh, ch·ªçn ng·∫´u nhi√™n t·ª´ danh s√°ch kh·∫£ d·ª•ng
    if port == 0:
        port = PORT_CHECKER.get_random_port()

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

    if multicast:
        sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, 2)

    try:
        sock.bind(('', port))
        print(f"[UDP SOCKET] ‚úÖ Bound to port {port}")
    except Exception as e:
        print(f"[UDP SOCKET] ‚ùå Failed to bind port {port}: {e}")
        raise e

    return sock


# ======================================================
# üì° MULTICAST JOIN / LEAVE
# ======================================================
def join_multicast_group(sock: socket.socket, multicast_ip: str, port: int) -> bool:
    """
    Tham gia multicast group
    """
    try:
        mreq = socket.inet_aton(multicast_ip) + socket.inet_aton('0.0.0.0')
        sock.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)
        print(f"[JOINED MULTICAST] {multicast_ip}:{port}")
        return True
    except Exception as e:
        print(f"[JOIN ERROR] {e}")
        return False


def leave_multicast_group(sock: socket.socket, multicast_ip: str) -> bool:
    """
    R·ªùi kh·ªèi multicast group
    """
    try:
        local_ip = get_local_ip()
        group = socket.inet_aton(multicast_ip)
        iface = socket.inet_aton(local_ip)
        mreq = struct.pack("=4s4s", group, iface)
        sock.setsockopt(socket.IPPROTO_IP, socket.IP_DROP_MEMBERSHIP, mreq)
        return True
    except Exception as e:
        print(f"‚ùå Error leaving multicast group {multicast_ip}: {e}")
        return False


# ======================================================
# üì§ / üì• SEND + RECEIVE UDP
# ======================================================
def send_udp(sock: socket.socket, data: dict, host: str, port: int) -> bool:
    try:
        if isinstance(data, dict):
            data = json.dumps(data).encode('utf-8')
        elif isinstance(data, str):
            data = data.encode('utf-8')

        sock.sendto(data, (host, port))
        return True
    except Exception as e:
        print(f"‚ùå Error sending UDP to {host}:{port}: {e}")
        return False


def receive_udp(sock: socket.socket, buffer_size: int = 4096, timeout: Optional[float] = None) -> Tuple[Optional[dict], Optional[Tuple[str, int]]]:
    try:
        if timeout is not None:
            sock.settimeout(timeout)

        data, addr = sock.recvfrom(buffer_size)
        try:
            json_data = json.loads(data.decode('utf-8'))
            return json_data, addr
        except json.JSONDecodeError:
            return {"raw_data": data.decode('utf-8')}, addr

    except socket.timeout:
        return None, None
    except Exception as e:
        print(f"‚ùå Error receiving UDP: {e}")
        return None, None


# ======================================================
# ‚öôÔ∏è UTILS
# ======================================================
def get_available_port(start_port: int = 5000, end_port: int = 6000) -> int:
    for port in range(start_port, end_port + 1):
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as sock:
                sock.bind(('0.0.0.0', port))
                return port
        except OSError:
            continue
    raise RuntimeError(f"No available ports between {start_port}-{end_port}")


def get_local_ip() -> str:
    """
    Tries to find the local IP address by connecting to an external server.
    Falls back to '127.0.0.1' upon any OS/Socket error.
    """
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as sock:
            # Connect to a known external address (like Google's DNS) to determine
            # the outbound interface's IP. This doesn't actually send data.
            sock.connect(("8.8.8.8", 80))
            return sock.getsockname()[0]

    # üö® CATCH C√ÅC L·ªñI H·ªÜ TH·ªêNG/SOCKET C·ª§ TH·ªÇ üö®
    # OSError covers most network-related connection and resource allocation errors.
    except OSError:
        # N·∫øu kh√¥ng th·ªÉ t·∫°o socket ho·∫∑c k·∫øt n·ªëi (v√≠ d·ª•: kh√¥ng c√≥ m·∫°ng),
        # tr·∫£ v·ªÅ loopback address.
        return "127.0.0.1"
