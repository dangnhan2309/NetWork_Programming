from typing import Dict, TYPE_CHECKING, List, Optional

if TYPE_CHECKING:
    from .player import Player
    from .board import Board
    from .tiles.base_tile import BaseTile
    from .tiles.property_tile import PropertyTile


class Bank:
    """
    Qu·∫£n l√Ω t√†i ch√≠nh trung t√¢m trong Monopoly:
    - Theo d√µi ti·ªÅn c·ªßa t·ª´ng ng∆∞·ªùi ch∆°i
    - Qu·∫£n l√Ω giao d·ªãch v·ªõi Bank, gi·ªØa c√°c Player
    - Qu·∫£n l√Ω s·ªü h·ªØu Property, nh√†, kh√°ch s·∫°n
    """

    def __init__(self):
        # üí∞ Qu·ªπ c·ªßa Bank v√† ng∆∞·ªùi ch∆°i
        self.cash_pool: int = 100_000
        self.free_parking_pool: int = 0
        self.player_balances: Dict[str, int] = {}

        # üè† S·ªü h·ªØu t√†i s·∫£n
        self.properties_owned: Dict[int, str] = {}  # property_id -> player_id
        self.available_houses: int = 32
        self.available_hotels: int = 12

    # ======================================================
    # üßæ QU·∫¢N L√ù NG∆Ø·ªúI CH∆†I
    # ======================================================
    def register_player(self, player: 'Player', initial_balance: int = 1500):
        """Th√™m ng∆∞·ªùi ch∆°i m·ªõi v√†o h·ªá th·ªëng Bank."""
        if player.id not in self.player_balances:
            self.player_balances[player.id] = initial_balance

    def get_balance(self, player: 'Player') -> int:
        """L·∫•y s·ªë d∆∞ c·ªßa ng∆∞·ªùi ch∆°i."""
        return self.player_balances.get(player.id, 0)

    # ======================================================
    # üí∏ GIAO D·ªäCH V·ªöI BANK
    # ======================================================
    def pay_player(self, player: 'Player', amount: int) -> bool:
        """Bank tr·∫£ ti·ªÅn cho ng∆∞·ªùi ch∆°i (v√≠ d·ª•: qua √¥ GO)."""
        if self.cash_pool >= amount:
            self.cash_pool -= amount
            self.player_balances[player.id] += amount
            return True
        return False

    def pay_bank(self, player: 'Player', amount: int) -> bool:
        """Ng∆∞·ªùi ch∆°i tr·∫£ ti·ªÅn cho Bank (thu·∫ø, ph·∫°t, ...)."""
        current_balance = self.get_balance(player)
        if current_balance >= amount:
            self.player_balances[player.id] -= amount
            self.cash_pool += amount
            return True
        else:
            # Ng∆∞·ªùi ch∆°i ph√° s·∫£n
            self.cash_pool += current_balance
            self.player_balances[player.id] = 0
            player.is_bankrupt = True
            return False

    # ======================================================
    # üîÅ GIAO D·ªäCH GI·ªÆA NG∆Ø·ªúI CH∆†I
    # ======================================================
    def transfer_between_players(self, sender: 'Player', receiver: 'Player', amount: int) -> Dict:
        """Chuy·ªÉn ti·ªÅn gi·ªØa hai ng∆∞·ªùi ch∆°i (tr·∫£ ti·ªÅn thu√™, n·ª£)."""
        sender_balance = self.get_balance(sender)
        if sender_balance >= amount:
            self.player_balances[sender.id] -= amount
            self.player_balances[receiver.id] += amount
            return {"success": True, "message": f"{sender.name} paid ${amount} to {receiver.name}."}
        else:
            # Ph√° s·∫£n
            self.player_balances[sender.id] = 0
            sender.is_bankrupt = True
            if sender_balance > 0:
                self.player_balances[receiver.id] += sender_balance
            return {"success": False, "message": f"{sender.name} went bankrupt paying {receiver.name} ${sender_balance}."}

    # ======================================================
    # üÖøÔ∏è FREE PARKING
    # ======================================================
    def collect_tax_or_fee(self, player: 'Player', amount: int):
        """Thu ti·ªÅn v√†o Free Parking Pool."""
        self.player_balances[player.id] -= amount
        self.free_parking_pool += amount

    def pay_free_parking(self, player: 'Player'):
        """Tr·∫£ to√†n b·ªô ti·ªÅn trong Free Parking cho ng∆∞·ªùi ch∆°i."""
        collected = self.free_parking_pool
        self.player_balances[player.id] += collected
        self.free_parking_pool = 0
        return collected

    # ======================================================
    # üè† PROPERTY MANAGEMENT
    # ======================================================
    def buy_property(self, player: 'Player', tile: 'PropertyTile') -> bool:
        """
        Ng∆∞·ªùi ch∆°i mua Property t·ª´ Bank.
        - Gi·∫£m ti·ªÅn c·ªßa ng∆∞·ªùi ch∆°i
        - G√°n quy·ªÅn s·ªü h·ªØu trong Bank
        """
        price = tile.price
        if self.get_balance(player) >= price:
            self.player_balances[player.id] -= price
            self.properties_owned[tile.tile_id] = str(player.id)
            tile.owner = player.id
            return True
        return False

    def set_property_owner(self, property_id: int, player_id: int):
        """G√°n property cho ng∆∞·ªùi ch∆°i."""
        self.properties_owned[property_id] = str(player_id)

    def reset_property_owner(self, player_id: int):
        """X√≥a to√†n b·ªô property c·ªßa ng∆∞·ªùi ch∆°i (ph√° s·∫£n)."""
        self.properties_owned = {pid: owner for pid, owner in self.properties_owned.items() if owner != str(player_id)}

    def get_properties_by_owner(self, player_id: int, board: 'Board') -> List['BaseTile']:
        """Tr·∫£ danh s√°ch Tile m√† player s·ªü h·ªØu."""
        owned_tile_ids = [pid for pid, owner in self.properties_owned.items() if owner == str(player_id)]
        return [tile for tile in board.tiles if tile.tile_id in owned_tile_ids]

    def get_owner_id(self, tile_id: int) -> Optional[int]:
        """Truy v·∫•n ng∆∞·ªùi s·ªü h·ªØu c·ªßa m·ªôt tile."""
        return self.properties_owned.get(tile_id)

    def remove_property_player_sell(self, tile_id: int, player_id: str) -> bool:
        """
        X√≥a quy·ªÅn s·ªü h·ªØu c·ªßa ng∆∞·ªùi ch∆°i ƒë·ªëi v·ªõi m·ªôt √¥ ƒë·∫•t c·ª• th·ªÉ khi ng∆∞·ªùi ch∆°i b√°n.

        Args:
            tile_id: ID c·ªßa √¥ ƒë·∫•t b·ªã b√°n.
            player_id: ID c·ªßa ng∆∞·ªùi ch∆°i ƒëang b√°n (d√πng ƒë·ªÉ x√°c th·ª±c).

        Returns:
            True n·∫øu quy·ªÅn s·ªü h·ªØu ƒë∆∞·ª£c x√≥a th√†nh c√¥ng, False n·∫øu tile kh√¥ng t·ªìn t·∫°i
            ho·∫∑c kh√¥ng thu·ªôc v·ªÅ ng∆∞·ªùi ch∆°i ƒë√≥.
        """
        current_owner_id = self.properties_owned.get(tile_id)

        # 1. Ki·ªÉm tra xem √¥ ƒë·∫•t c√≥ t·ªìn t·∫°i kh√¥ng
        if current_owner_id is None:
            # Ghi log: √î ƒë·∫•t kh√¥ng c√≥ ch·ªß ho·∫∑c ID kh√¥ng h·ª£p l·ªá.
            print(f"Error: Tile {tile_id} is not currently owned.")
            return False

        # 2. Ki·ªÉm tra xem ng∆∞·ªùi b√°n c√≥ ph·∫£i l√† ch·ªß s·ªü h·ªØu hi·ªán t·∫°i kh√¥ng
        if current_owner_id != player_id:
            # Ghi log: Ng∆∞·ªùi ch∆°i kh√¥ng ph·∫£i l√† ch·ªß s·ªü h·ªØu h·ª£p l·ªá.
            print(f"Error: Player {player_id} does not own tile {tile_id}. Current owner: {current_owner_id}")
            return False

        # 3. X√≥a quy·ªÅn s·ªü h·ªØu
        try:
            del self.properties_owned[tile_id]
            print(f"Success: Tile {tile_id} ownership removed.")
            return True
        except KeyError:
            # N√™n ƒë∆∞·ª£c b·∫Øt b·ªüi ki·ªÉm tra ban ƒë·∫ßu, nh∆∞ng th√™m v√†o ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n
            return False

    # ======================================================
    # üèóÔ∏è NH√Ä & KH√ÅCH S·∫†N
    # ======================================================
    def houses_available(self) -> int:
        """Tr·∫£ v·ªÅ s·ªë l∆∞·ª£ng nh√† c√≤n l·∫°i."""
        return self.available_houses

    def hotels_available(self) -> int:
        """Tr·∫£ v·ªÅ s·ªë l∆∞·ª£ng kh√°ch s·∫°n c√≤n l·∫°i."""
        return self.available_hotels

    def build_house(self, player: 'Player', tile: 'PropertyTile') -> bool:
        """X√¢y 1 nh√† tr√™n property."""
        if self.available_houses > 0 and tile.owner == player.id:
            self.available_houses -= 1
            tile.properties.houses += 1
            return True
        return False

    def build_hotel(self, player: 'Player', tile: 'PropertyTile') -> bool:
        """X√¢y kh√°ch s·∫°n (sau khi ƒë·ªß 4 nh√†)."""
        if tile.properties.houses == 4 and self.available_hotels > 0:
            self.available_hotels -= 1
            self.available_houses += 4  # Tr·∫£ l·∫°i 4 nh√†
            tile.properties.houses = 0
            tile.properties.has_hotel = True
            return True
        return False
