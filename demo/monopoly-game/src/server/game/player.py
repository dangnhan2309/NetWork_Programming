"""
Player class for Monopoly
----------------------------------
ƒê·∫°i di·ªán cho m·ªôt ng∆∞·ªùi ch∆°i trong Monopoly game.
Qu·∫£n l√Ω ti·ªÅn, v·ªã tr√≠, t√†i s·∫£n, l∆∞·ª£t, v√† c√°c h√†nh ƒë·ªông c∆° b·∫£n.
"""

from typing import Dict, List, Optional


class Player:
    def __init__(self, player_id: str, name: str, starting_money: int = 1500):
        self.id = player_id
        self.name = name
        self.money = starting_money
        self.position = 0
        self.properties: List[int] = []
        self.in_jail = False
        self.jail_turns = 0
        self.bankrupt = False
        self.turn_active = False

    # ======================================
    # üß≠ Movement
    # ======================================

    def move(self, steps: int, board_size: int = 40) -> int:
        """Di chuy·ªÉn ng∆∞·ªùi ch∆°i tr√™n board"""
        if self.in_jail:
            return self.position

        old_pos = self.position
        self.position = (self.position + steps) % board_size

        # N·∫øu v∆∞·ª£t qua "GO" -> +200$
        if self.position < old_pos:
            self.money += 200

        return self.position

    # ======================================
    # üí∞ Money Management
    # ======================================

    def pay(self, amount: int, receiver: Optional["Player"] = None) -> bool:
        """Tr·∫£ ti·ªÅn cho ng∆∞·ªùi ch∆°i kh√°c ho·∫∑c ng√¢n h√†ng"""
        if self.money < amount:
            self.money = 0
            self.bankrupt = True
            return False

        self.money -= amount
        if receiver:
            receiver.money += amount
        return True

    def earn(self, amount: int):
        """Nh·∫≠n ti·ªÅn (t·ª´ GO, Chance, v.v.)"""
        self.money += amount

    def is_bankrupt(self) -> bool:
        """Ki·ªÉm tra ng∆∞·ªùi ch∆°i ƒë√£ ph√° s·∫£n ch∆∞a"""
        return self.bankrupt or self.money <= 0

    # ======================================
    # üè† Property Management
    # ======================================

    def add_property(self, tile_id: int):
        """Th√™m t√†i s·∫£n v√†o danh s√°ch s·ªü h·ªØu"""
        if tile_id not in self.properties:
            self.properties.append(tile_id)

    def remove_property(self, tile_id: int):
        """X√≥a t√†i s·∫£n khi b√°n ho·∫∑c ph√° s·∫£n"""
        if tile_id in self.properties:
            self.properties.remove(tile_id)

    def reset_properties(self):
        """X√≥a to√†n b·ªô t√†i s·∫£n"""
        self.properties.clear()

    # ======================================
    # ‚è± Jail & Turn Management
    # ======================================

    def send_to_jail(self, jail_pos: int):
        """ƒê∆∞a ng∆∞·ªùi ch∆°i v√†o t√π"""
        self.position = jail_pos
        self.in_jail = True
        self.jail_turns = 3

    def process_jail_turn(self):
        """X·ª≠ l√Ω 1 l∆∞·ª£t trong t√π"""
        if self.in_jail:
            self.jail_turns -= 1
            if self.jail_turns <= 0:
                self.in_jail = False

    def start_turn(self):
        """K√≠ch ho·∫°t l∆∞·ª£t ch∆°i"""
        self.turn_active = True

    def end_turn(self):
        """K·∫øt th√∫c l∆∞·ª£t ch∆°i"""
        self.turn_active = False

    # ======================================
    # üßæ Serialization
    # ======================================

    def to_dict(self) -> Dict:
        """Chuy·ªÉn sang dict ƒë·ªÉ g·ª≠i qua network"""
        return {
            "id": self.id,
            "name": self.name,
            "money": self.money,
            "position": self.position,
            "properties": self.properties,
            "in_jail": self.in_jail,
            "bankrupt": self.bankrupt,
            "turn_active": self.turn_active
        }

    @staticmethod
    def from_dict(data: Dict) -> "Player":
        """Kh√¥i ph·ª•c player t·ª´ d·ªØ li·ªáu JSON"""
        p = Player(data["id"], data["name"], data.get("money", 1500))
        p.position = data.get("position", 0)
        p.properties = data.get("properties", [])
        p.in_jail = data.get("in_jail", False)
        p.bankrupt = data.get("bankrupt", False)
        p.turn_active = data.get("turn_active", False)
        return p
    # ======================================
    # üîç Debug
    # ======================================

    def __repr__(self):
        return f"<Player {self.name}: ${self.money}, pos={self.position}, jail={self.in_jail}>"
