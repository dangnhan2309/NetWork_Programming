import socket
import struct
from ..utils import logger
from .network_utils import udp_send


class MulticastManager:
    """
    B·ªô ƒëi·ªÅu h∆∞·ªõng m·∫°ng (Network Router)
    -----------------------------------
    - Qu·∫£n l√Ω multicast group cho t·ª´ng ph√≤ng.
    - G·ª≠i packet ƒë·∫øn ƒë√∫ng nh√≥m ho·∫∑c client c·ª• th·ªÉ.
    - H·ªó tr·ª£ ph√¢n lo·∫°i client: host, player, observer.
    """

    def __init__(self,logger_ins : 'logger', base_ip="239.0.0.0", base_port=5000):
        self.groups = {}  # { room_id: { "ip", "port", "socket", "clients": {id: info}} }
        self.base_ip = base_ip
        self.base_port = base_port
        self.ip_pool = self._generate_multicast_ip_pool()
        self.logger =logger_ins
        self.logger.info(message=f"[MULTICAST MANAGER] Initialized base={self.base_ip}:{self.base_port}")

    # --------------------------------------------------------------------------
    # üß± IP/Port Pool
    # --------------------------------------------------------------------------
    def _generate_multicast_ip_pool(self, start=1, end=254):
        """Sinh danh s√°ch IP multicast kh·∫£ d·ª•ng (239.x.x.x)."""
        base_parts = self.base_ip.split(".")
        base_prefix = ".".join(base_parts[:3])
        return [f"{base_prefix}.{i}" for i in range(start, end)]

    def _get_next_available_group(self):
        """L·∫•y IP + Port kh·∫£ d·ª•ng cho ph√≤ng m·ªõi."""
        for ip in self.ip_pool:
            for port in range(self.base_port, self.base_port + 1000):
                if all((g["ip"], g["port"]) != (ip, port) for g in self.groups.values()):
                    return ip, port
        raise RuntimeError("Kh√¥ng c√≤n IP/Port multicast kh·∫£ d·ª•ng!")

    # --------------------------------------------------------------------------
    # üè† Group Management
    # --------------------------------------------------------------------------
    def create_group(self, room_id: str):
        """T·∫°o group multicast m·ªõi cho ph√≤ng."""
        if room_id in self.groups:
            return self.groups[room_id]

        ip, port = self._get_next_available_group()
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
            sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            sock.bind(('', port))

            # Join multicast group
            mreq = struct.pack("4sl", socket.inet_aton(ip), socket.INADDR_ANY)
            sock.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)
            sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, 2)

            self.logger.info(message =f"[MULTICAST] Room {room_id} joined group {ip}:{port}")
        except OSError as e:
            self.logger.warning(f"[MULTICAST FALLBACK] Kh√¥ng th·ªÉ join multicast ({e}). D√πng UDP th∆∞·ªùng.")
            sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

        self.groups[room_id] = {"ip": ip, "port": port, "socket": sock, "clients": {}}
        return self.groups[room_id]

    def remove_group(self, room_id: str):
        """X√≥a group multicast khi ph√≤ng k·∫øt th√∫c."""
        group = self.groups.pop(room_id, None)
        if not group:
            self.logger.warning(f"[MULTICAST] Group {room_id} kh√¥ng t·ªìn t·∫°i ƒë·ªÉ x√≥a.")
            return

        ip, port, sock = group["ip"], group["port"], group["socket"]
        try:
            mreq = struct.pack("4sl", socket.inet_aton(ip), socket.INADDR_ANY)
            sock.setsockopt(socket.IPPROTO_IP, socket.IP_DROP_MEMBERSHIP, mreq)
        except OSError:
            pass
        finally:
            sock.close()
            self.logger.info(message=f"[MULTICAST] Removed group {room_id} ({ip}:{port})")

    def list_groups(self):
        """Li·ªát k√™ t·∫•t c·∫£ group hi·ªán c√≥."""
        return {
            rid: {"ip": info["ip"], "port": info["port"], "client_count": len(info["clients"])}
            for rid, info in self.groups.items()
        }

    # --------------------------------------------------------------------------
    # üë• Client Management
    # --------------------------------------------------------------------------
    def register_client(self, room_id: str, client_id: str, addr, role="player"):
        """
            ƒêƒÉng k√Ω client v√†o group multicast (d·∫°ng logical, kh√¥ng c·∫ßn join socket).

            Args:
                room_id (str): ID c·ªßa ph√≤ng game.
                client_id (str): ID ƒë·ªãnh danh c·ªßa client.
                addr (tuple): ƒê·ªãa ch·ªâ IP v√† Port c·ªßa client (ip, port).
                role (str, optional): Vai tr√≤ c·ªßa client ("host" | "player" | "observer").
                                      M·∫∑c ƒë·ªãnh l√† "player".
            """
        group = self.groups.get(room_id)
        if not group:
            self.logger.error(f"[CLIENT REGISTER] Room {room_id} ch∆∞a c√≥ group multicast.")
            return
        group["clients"][client_id] = {"addr": addr, "role": role}
        self.logger.debug(message=f"[CLIENT REGISTER] {client_id} ({role}) joined {room_id} -> {addr}")

    def unregister_client(self, room_id: str, client_id: str):
        group = self.groups.get(room_id)
        if group and client_id in group["clients"]:
            del group["clients"][client_id]
            self.logger.debug(message=f"[CLIENT UNREGISTER] {client_id} left {room_id}")

    # --------------------------------------------------------------------------
    # üöÄ Packet Routing
    # --------------------------------------------------------------------------
    def send_packet(self, room_id: str, packet: dict, target="all", role=None):
        """
        G·ª≠i packet ƒë·∫øn nh√≥m ho·∫∑c ng∆∞·ªùi ch∆°i c·ª• th·ªÉ.
        :param room_id: Ph√≤ng ƒë√≠ch
        :param packet: D·ªØ li·ªáu d·∫°ng dict
        :param target: "all" | client_id
        :param role: N·∫øu ch·ªâ mu·ªën g·ª≠i cho "host"/"observer"/"player"
        """
        group = self.groups.get(room_id)
        if not group:
            self.logger.error(f"[MULTICAST SEND] Room {room_id} ch∆∞a c√≥ group.")
            return

        # G·ª≠i multicast to√†n ph√≤ng
        if target == "all":
            udp_send(group["socket"],packet, (group["ip"], group["port"]))
            self.logger.debug(message=f"[MULTICAST] Broadcast room {room_id} -> {group['ip']}:{group['port']}")
            return


        # G·ª≠i unicast ƒë·∫øn 1 client c·ª• th·ªÉ ho·∫∑c theo vai tr√≤
        for cid, info in group["clients"].items():
            if (target != "all" and cid == target) or (role and info["role"] == role):
                udp_send(group["socket"],packet, info["addr"])
                self.logger.debug(message=f"[UNICAST] {room_id} -> {cid} ({info['role']}) {info['addr']}")

    # --------------------------------------------------------------------------
    # üß™ Debug
    # --------------------------------------------------------------------------
    def broadcast_test(self, room_id: str, message="ping"):
        packet = {"type": "TEST", "message": message, "room_id": room_id}
        self.send_packet(room_id, packet)

    def close_all_multicast_groups(self):
        """ƒê√≥ng t·∫•t c·∫£ c√°c socket multicast ƒë√£ ƒëƒÉng k√Ω."""
        for room_id, group in list(self.groups.items()):  # D√πng list() ƒë·ªÉ duy·ªát v√† pop an to√†n
            try:
                sock = group.get("socket")
                if sock:
                    sock.close()
                    self.logger.debug(f"[MULTICAST] Closed socket for room {room_id}")
                # X√≥a kh·ªèi danh s√°ch group
                self.groups.pop(room_id, None)
            except Exception as e:
                self.logger.error(f"‚ùå Error closing socket for {room_id}: {e}")
