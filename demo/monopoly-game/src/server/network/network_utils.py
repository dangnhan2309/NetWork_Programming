# network/network_utils.py
"""
Network Utilities Module
------------------------
H·ªó tr·ª£ g·ª≠i / nh·∫≠n g√≥i tin m·∫°ng (TCP, UDP, Multicast) theo chu·∫©n packet_format
T·ª± ƒë·ªông:
- Encode / Decode / Validate g√≥i tin
- Ghi log chi ti·∫øt (send / recv)
- Fallback sang JSON n·∫øu packet_format g·∫∑p l·ªói
"""

import socket
import json
from json import JSONDecodeError

from ..utils import packetformat
from ..utils import logger

logger = logger("network_utils")


# ============================================================
# üß± CORE ENCODE / DECODE LAYER
# ============================================================
def encode_packet(packet: dict) -> bytes:
    """Encode packet theo chu·∫©n utils.packet_format, fallback sang JSON"""
    try:
        return packetformat.encode_packet(packet)
    except Exception as e:
        logger.warning(f"Packet format encode l·ªói ({e}), fallback sang JSON.")
        try:
            return json.dumps(packet).encode("utf-8")
        except Exception as e2:
            logger.error(f"Encode JSON th·∫•t b·∫°i: {e2}")
            return b""


def decode_packet(data: bytes) -> dict | None:
        """Decode packet, fallback to JSON if initial decode fails."""

        # --- FIRST ATTEMPT: Custom Packet Format ---
        try:
            # Assuming packetformat.decode_packet raises some form of ValueError
            # or custom decoding error when data is corrupt.
            return packetformat.decode_packet(data)

            # Catch specific errors for the packet format failure.
        # We use a broad base exception (like ValueError) if we don't know the custom error name.
        except (ValueError, TypeError) as e:
            logger.debug(f"Custom decode failed ({e}). Attempting JSON fallback.")

        # --- SECOND ATTEMPT: JSON Fallback ---
        try:
            # 1. Decode bytes to string
            decoded_string = data.decode("utf-8")

            # 2. Parse JSON
            return json.loads(decoded_string)

        # Catch specific errors for JSON failure
        except (JSONDecodeError, UnicodeDecodeError) as e:
            # This is the final expected failure point for bad data format
            logger.warning(f"JSON decode failed. Data is unusable ({e}), skipping.")
            return None


# ============================================================
# ‚öôÔ∏è VALIDATION & LOGGING
# ============================================================
def validate_packet(packet: dict) -> bool:
    # n·∫øu c√≥ header/payload ki·ªÉu PacketFormat
    if "header" in packet and "payload" in packet:
        return True
    # fallback c≈©
    required = ["type", "data", "timestamp"]
    missing = [f for f in required if f not in packet]
    if missing:
        logger.debug(f"G√≥i tin thi·∫øu tr∆∞·ªùng: {missing}")
        return False
    return True


def log_packet(packet: dict, action: str, addr=None):
    """Ghi log g√≥i tin g·ª≠i / nh·∫≠n"""
    prefix = f"[{action.upper()}]"
    addr_info = f" | from {addr}" if addr else ""
    pkt_type = packet.get("type", "unknown")
    # S·ª¨A: s·ª≠ d·ª•ng logger thay v√¨ logger.log_packet
    logger.info(f"{prefix} {pkt_type}{addr_info}")


# ============================================================
# üåê TCP FUNCTIONS
# ============================================================
def tcp_send(sock: socket.socket, packet: dict):
    """G·ª≠i packet qua TCP"""
    try:
        encoded = encode_packet(packet)
        sock.sendall(encoded)
        log_packet(packet, "SEND-TCP")
    except Exception as e:
        logger.error(f"L·ªói TCP send: {e}")


def tcp_receive(sock: socket.socket, buffer_size=4096) -> dict | None:
    """Nh·∫≠n packet TCP"""
    try:
        data = sock.recv(buffer_size)
        if not data:
            return None
        packet = decode_packet(data)
        if validate_packet(packet):
            log_packet(packet, "RECV-TCP")
            return packet
        return None
    except Exception as e:
        logger.error(f"L·ªói TCP receive: {e}")
        return None


# ============================================================
# üì° UDP / MULTICAST FUNCTIONS
# ============================================================
def udp_send(sock: socket.socket, packet: dict, addr: tuple):
    """
    G·ª≠i packet qua UDP ho·∫∑c Multicast.

    Args:
        sock: socket UDP ƒë√£ bind / join multicast.
        packet: dict packet theo chu·∫©n PacketFormat.
        addr: tuple(IP, port) c·ªßa ƒë√≠ch ƒë·∫øn.

    Notes for deployment:
        - packet ƒë∆∞·ª£c encode sang JSON tr∆∞·ªõc khi g·ª≠i.
        - Sau khi g·ª≠i, packet ƒë∆∞·ª£c log ƒë·ªÉ d·ªÖ quan s√°t
          lu·ªìng d·ªØ li·ªáu trong m√¥i tr∆∞·ªùng production.
        - Gi·ªØ log ƒë·ªÉ debug c√°c l·ªói multicast / UDP.
    """
    try:
        encoded = packetformat.encode_packet(packet)  # encode packet
        sock.sendto(encoded, addr)
        # Log packet g·ª≠i: n·ªôi dung + ƒë·ªãa ch·ªâ
        logger.log_packet("SEND", addr, packet)
    except Exception as e:
        logger.error(f"L·ªói UDP send t·ªõi {addr}: {e}")


def udp_receive(sock: socket.socket, buffer_size=4096) -> tuple[dict | None, tuple | None]:
    """
    Nh·∫≠n packet t·ª´ UDP ho·∫∑c Multicast.

    Args:
        sock: socket UDP ƒë√£ bind / join multicast.
        buffer_size: k√≠ch th∆∞·ªõc buffer t·ªëi ƒëa ƒë·ªÉ nh·∫≠n packet.

    Returns:
        (packet dict, addr tuple) n·∫øu packet h·ª£p l·ªá,
        (None, addr) n·∫øu packet kh√¥ng h·ª£p l·ªá,
        (None, None) n·∫øu l·ªói trong qu√° tr√¨nh nh·∫≠n.

    Notes for deployment:
        - Packet s·∫Ω ƒë∆∞·ª£c decode t·ª´ JSON sang dict.
        - Packet h·ª£p l·ªá s·∫Ω ƒë∆∞·ª£c log chi ti·∫øt.
        - Packet kh√¥ng h·ª£p l·ªá ch·ªâ log c·∫£nh b√°o, kh√¥ng l√†m gi√°n ƒëo·∫°n server.
    """
    try:
        data, addr = sock.recvfrom(buffer_size)
        packet = packetformat.decode_packet(data)
        if packetformat.is_valid(packet):
            # Log packet nh·∫≠n: n·ªôi dung + ƒë·ªãa ch·ªâ
            logger.log_packet("RECV", addr, packet)
            return packet, addr
        logger.warning(f"G√≥i tin kh√¥ng h·ª£p l·ªá t·ª´ {addr}")
        return None, addr
    except Exception as e:
        logger.error(f"L·ªói UDP receive: {e}")
        return None, None
# ============================================================
# üß† HIGH-LEVEL HELPERS
# ============================================================
def send(sock: socket.socket, packet: dict, addr=None, protocol="auto"):
    """
    H√†m g·ª≠i linh ho·∫°t:
    - protocol = 'tcp' ho·∫∑c 'udp'
    - n·∫øu auto: x√°c ƒë·ªãnh theo socket type
    """
    if protocol == "tcp" or (protocol == "auto" and sock.type == socket.SOCK_STREAM):
        tcp_send(sock, packet)
    else:
        if addr is None:
            raise ValueError("UDP c·∫ßn ƒë·ªãa ch·ªâ ƒë√≠ch (addr)")
        udp_send(sock, packet, addr)


def receive(sock: socket.socket, protocol="auto", buffer_size=4096):
    """
    H√†m nh·∫≠n linh ho·∫°t:
    - T·ª± ƒë·ªông nh·∫≠n TCP ho·∫∑c UDP
    """
    if protocol == "tcp" or (protocol == "auto" and sock.type == socket.SOCK_STREAM):
        return tcp_receive(sock)
    else:
        return udp_receive(sock, buffer_size)


# ============================================================
# üîç UTILITIES
# ============================================================
def create_udp_socket(multicast=False, reuse=True, ttl=1):
    """T·∫°o UDP ho·∫∑c Multicast socket"""
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
    if reuse:
        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    if multicast:
        sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, ttl)
    return sock


def join_multicast_group(sock: socket.socket, mcast_ip: str):
    """Tham gia nh√≥m multicast"""
    import struct
    try:
        mreq = struct.pack("4sl", socket.inet_aton(mcast_ip), socket.INADDR_ANY)
        sock.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)
        logger.info(f"ƒê√£ join group multicast {mcast_ip}")
    except Exception as e:
        logger.error(f"Kh√¥ng th·ªÉ join group {mcast_ip}: {e}")


def leave_multicast_group(sock: socket.socket, mcast_ip: str):
    """R·ªùi kh·ªèi nh√≥m multicast"""
    import struct
    try:
        mreq = struct.pack("4sl", socket.inet_aton(mcast_ip), socket.INADDR_ANY)
        sock.setsockopt(socket.IPPROTO_IP, socket.IP_DROP_MEMBERSHIP, mreq)
        logger.info(f"ƒê√£ r·ªùi group multicast {mcast_ip}")
    except Exception as e:
        logger.error(f"Kh√¥ng th·ªÉ r·ªùi group {mcast_ip}: {e}")
def create_tcp_server(host: str, port: int, backlog=5) -> socket.socket:
    """
    T·∫°o TCP server socket, bind v√† listen.
    Tr·∫£ v·ªÅ socket ƒë√£ bind s·∫µn.
    """
    try:
        srv_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        srv_sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        srv_sock.bind((host, port))
        srv_sock.listen(backlog)
        logger.info(f"TCP server listening on {host}:{port}")
        return srv_sock
    except Exception as e:
        logger.error(f"Kh√¥ng th·ªÉ t·∫°o TCP server {host}:{port} - {e}")
        raise

def send_udp(packet: dict, mcast_ip: str, mcast_port: int, sock: socket.socket = None, ttl=1):
    """
    G·ª≠i g√≥i UDP / Multicast t·ªõi mcast_ip:mcast_port.
    - N·∫øu kh√¥ng c√≥ socket, t·ª± t·∫°o v√† g·ª≠i.
    - TTL ch·ªâ √°p d·ª•ng cho multicast.
    """
    own_sock = False
    if sock is None:
        sock = create_udp_socket(multicast=True, ttl=ttl)
        own_sock = True
    try:
        addr = (mcast_ip, mcast_port)
        udp_send(sock, packet, addr)
    finally:
        if own_sock:
            sock.close()