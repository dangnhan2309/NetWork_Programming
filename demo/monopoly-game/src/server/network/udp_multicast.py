# src/server/network/udp_handler.py
"""X·ª≠ l√Ω UDP Multicast cho c√°c ph√≤ng game"""
import asyncio
import socket
import struct
import json
from typing import Dict, List, Optional
from ..utils.logger import Logger
from ..utils.formatters import ServerFormatter
from ..utils.packet_format import PacketFormat
from ..utils.network_utils import create_udp_socket, join_multicast_group, leave_multicast_group, udp_send, udp_receive
from ..rooms.room_manager import RoomManager
from .multiplecast_manager import MulticastManager
from ..utils.network_utils import safe_udp_receive

class UDPHandler:
    """X·ª≠ l√Ω UDP Multicast cho c√°c ph√≤ng game"""
    def __init__(self, room_manager: RoomManager, logger: Logger, multicast_manager: MulticastManager):
        self.room_manager = room_manager
        self.logger = logger
        self.formatter = ServerFormatter()
        self.multicast_manager = multicast_manager
        self.running_event = asyncio.Event()
        self._tasks: Dict[str, asyncio.Task] = {}
        self.heartbeat_interval = 30

    async def run(self):
        """Ch·∫°y UDP handler - kh·ªüi ƒë·ªông t·∫•t c·∫£ ph√≤ng hi·ªán t·∫°i"""
        self.logger.info(self.formatter.format_system_message("UDP Handler ƒë√£ kh·ªüi ƒë·ªông"))
        self.running_event.set()  # b·∫≠t tr·∫°ng th√°i ch·∫°y
        
        try:
            while self.running_event.is_set():
                # T·∫°o task cho c√°c ph√≤ng ch∆∞a c√≥ task
                for room_id in list(self.multicast_manager.groups.keys()):
                    if room_id not in self._tasks:
                        self._tasks[room_id] = asyncio.create_task(self._process_room(room_id))
                
                # X√≥a task c·ªßa c√°c ph√≤ng ƒë√£ ƒë√≥ng
                closed_rooms = [rid for rid in self._tasks if rid not in self.multicast_manager.groups]
                for rid in closed_rooms:
                    task = self._tasks.pop(rid)
                    task.cancel()
                
                # G·ª≠i heartbeat ƒë·ªãnh k·ª≥
                await self.send_heartbeats()
                await asyncio.sleep(0.1)  # tr√°nh high CPU
        except Exception as e:
            self.logger.error(self.formatter.format_error("UDP Handler", str(e)))
        finally:
            await self.cleanup()

    async def _process_room(self, room_id: str):
        """X·ª≠ l√Ω UDP messages cho t·ª´ng ph√≤ng ri√™ng"""
        try:
            while self.running_event.is_set() and self.multicast_manager.is_room_active(room_id):
                try:
                    sock = self.multicast_manager.get_group(room_id)["socket"]
                    packet, addr = safe_udp_receive(sock)
                    if packet and addr:
                        await self.handle_udp_packet(room_id, packet, addr)
                except Exception as e:
                    self.logger.error(f"‚ùå L·ªói x·ª≠ l√Ω UDP ph√≤ng {room_id}: {e}")
                
                await asyncio.sleep(0)  # yield control
        except asyncio.CancelledError:
            self.logger.info(f"üõë Task UDP ph√≤ng {room_id} b·ªã h·ªßy")
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói task UDP ph√≤ng {room_id}: {e}")

    def stop(self):
        """D·ª´ng UDP Handler"""
        self.running_event.clear()
        for task in self._tasks.values():
            task.cancel()
        
    async def handle_udp_packet(self, room_id: str, packet: dict, addr: tuple):
        """X·ª≠ l√Ω packet UDP - CH·ªà X·ª¨ L√ù PACKET T·ª™ CLIENT"""
        try:
            sender = packet.get("header", {}).get("sender", "unknown")
            
            # CH·ªà X·ª¨ L√ù PACKET T·ª™ CLIENT, KH√îNG PH·∫¢I SERVER
            if sender == "server":
                return  # B·ªè qua ho√†n to√†n
                
            packet_type = packet.get("header", {}).get("type", "unknown")
            action = packet.get("command", {}).get("action", "unknown")
            
            self.logger.debug(f"üì® UDP t·ª´ client {sender} trong {room_id}: {packet_type}/{action}")
            
            # ... ph·∫ßn x·ª≠ l√Ω c√≤n l·∫°i gi·ªØ nguy√™n
            handlers = {
                "game_action": self.handle_game_action,
                "chat_message": self.handle_chat_message,
                "heartbeat": self.handle_heartbeat,
                "system_message": self.handle_system_message,
                "player_move": self.handle_player_move,
                "property_purchase": self.handle_property_purchase
            }
            
            handler = handlers.get(packet_type)
            if handler:
                await handler(room_id, packet, addr)
            else:
                self.logger.warning(f"‚ö†Ô∏è UDP packet type kh√¥ng x√°c ƒë·ªãnh: {packet_type}")
                
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói x·ª≠ l√Ω UDP packet: {e}")
    
    async def handle_game_action(self, room_id: str, packet: dict, addr: tuple):
        """X·ª≠ l√Ω action game qua UDP"""
        try:
            action = packet.get("command", {}).get("action")
            player_name = packet.get("header", {}).get("sender")
            args = packet.get("command", {}).get("args", {})
            
            self.logger.info(f"üéÆ UDP Game action t·ª´ {player_name}: {action}")
            
            # Broadcast action ƒë·∫øn t·∫•t c·∫£ players trong ph√≤ng
            await self.broadcast_to_room(room_id, packet)
            
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói x·ª≠ l√Ω game action: {e}")
    
    async def handle_chat_message(self, room_id: str, packet: dict, addr: tuple):
        """X·ª≠ l√Ω tin nh·∫Øn chat qua UDP"""
        try:
            message = packet.get("payload", {}).get("message", "")
            player_name = packet.get("header", {}).get("sender", "Unknown")
            
            self.logger.info(f"üí¨ UDP Chat t·ª´ {player_name} trong {room_id}: {message}")
            
            # Broadcast tin nh·∫Øn ƒë·∫øn t·∫•t c·∫£ players trong ph√≤ng
            await self.broadcast_to_room(room_id, packet)
            
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói x·ª≠ l√Ω chat message: {e}")
    
    async def handle_heartbeat(self, room_id: str, packet: dict, addr: tuple):
        """X·ª≠ l√Ω heartbeat t·ª´ client"""
        try:
            player_name = packet.get("header", {}).get("sender")
            self.logger.debug(f"üíì UDP Heartbeat t·ª´ {player_name} trong {room_id}")
            
            # G·ª≠i heartbeat response
            response_packet = PacketFormat.create_packet(
                packet_type="heartbeat",
                room_id=room_id,
                sender="server",
                target=player_name,
                action="heartbeat_response",
                payload={"status": "alive", "timestamp": PacketFormat.generate_timestamp()}
            )
            
            await self.send_to_room(room_id, response_packet)
            
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói x·ª≠ l√Ω heartbeat: {e}")
    
    async def handle_system_message(self, room_id: str, packet: dict, addr: tuple):
        """X·ª≠ l√Ω system message"""
        try:
            message = packet.get("payload", {}).get("message", "")
            self.logger.info(f"üì¢ UDP System message trong {room_id}: {message}")
            
            # Broadcast system message
            await self.broadcast_to_room(room_id, packet)
            
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói x·ª≠ l√Ω system message: {e}")

    async def handle_player_move(self, room_id: str, packet: dict, addr: tuple):
        """X·ª≠ l√Ω di chuy·ªÉn ng∆∞·ªùi ch∆°i"""
        try:
            player_name = packet.get("header", {}).get("sender")
            new_position = packet.get("payload", {}).get("position", 0)
            
            self.logger.info(f"üë£ {player_name} di chuy·ªÉn ƒë·∫øn √¥ {new_position} trong {room_id}")
            
            # Broadcast th√¥ng tin di chuy·ªÉn
            await self.broadcast_to_room(room_id, packet)
            
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói x·ª≠ l√Ω player move: {e}")

    async def handle_property_purchase(self, room_id: str, packet: dict, addr: tuple):
        """X·ª≠ l√Ω mua t√†i s·∫£n"""
        try:
            player_name = packet.get("header", {}).get("sender")
            property_id = packet.get("payload", {}).get("property_id")
            
            self.logger.info(f"üè† {player_name} mua t√†i s·∫£n {property_id} trong {room_id}")
            
            # Broadcast th√¥ng tin mua t√†i s·∫£n
            await self.broadcast_to_room(room_id, packet)
            
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói x·ª≠ l√Ω property purchase: {e}")
    
    async def setup_room_multicast(self, room_id: str, multicast_ip: str, port: int) -> bool:
        """Thi·∫øt l·∫≠p multicast socket cho ph√≤ng - TH√äM LOG CHI TI·∫æT"""
        try:
            self.logger.info(f"üîß Setting up multicast for {room_id} at {multicast_ip}:{port}")
            
            if room_id in self.multicast_manager.groups:
                self.logger.info(f"üîÑ Multicast socket cho {room_id} ƒë√£ t·ªìn t·∫°i")
                return True
            
            group_info = self.multicast_manager.create_group(room_id, multicast_ip, port)
            
            if group_info:
                self.logger.info(self.formatter.format_system_message(
                    f"‚úÖ ƒê√£ thi·∫øt l·∫≠p multicast cho {room_id} t·∫°i {multicast_ip}:{port}"
                ))
                return True
            else:
                self.logger.error(f"‚ùå Failed to create multicast group for {room_id}")
                return False
                
        except Exception as e:
            self.logger.error(self.formatter.format_error("Thi·∫øt l·∫≠p multicast", str(e)))
            return False
    
    async def broadcast_system_message(self, room_id: str, message: str):
        """Broadcast system message ƒë·∫øn ph√≤ng"""
        try:
            if not self.multicast_manager.is_room_active(room_id):
                self.logger.warning(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y multicast socket cho {room_id}")
                return
            
            success = self.multicast_manager.broadcast_system_message(room_id, message)
            
            if success:
                self.logger.info(f"üì¢ ƒê√£ broadcast system message ƒë·∫øn {room_id}: {message}")
            else:
                self.logger.error(f"‚ùå L·ªói broadcast system message ƒë·∫øn {room_id}")
            
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói broadcast system message: {e}")
    
    async def broadcast_to_room(self, room_id: str, packet: dict):
        """Broadcast packet ƒë·∫øn t·∫•t c·∫£ clients trong ph√≤ng"""
        try:
            if not self.multicast_manager.is_room_active(room_id):
                self.logger.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ broadcast - kh√¥ng t√¨m th·∫•y socket cho {room_id}")
                return
            
            success = self.multicast_manager.broadcast_to_room(room_id, packet)
            
            if not success:
                self.logger.error(f"‚ùå L·ªói broadcast packet ƒë·∫øn {room_id}")
            
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói broadcast ƒë·∫øn {room_id}: {e}")
    
    async def send_to_room(self, room_id: str, packet: dict):
        """G·ª≠i packet ƒë·∫øn ph√≤ng (alias cho broadcast)"""
        await self.broadcast_to_room(room_id, packet)

    async def auto_setup_room_multicast(self, room_id: str):
        """T·ª± ƒë·ªông thi·∫øt l·∫≠p multicast khi ph√≤ng ƒë∆∞·ª£c t·∫°o"""
        try:
            room_info = self.room_manager.get_room_info(room_id)
            if not room_info:
                self.logger.warning(f"‚ö†Ô∏è Room {room_id} not found for auto-setup")
                return False
                
            multicast_ip = room_info.get('multicast_ip')
            port = room_info.get('port')
            
            if not multicast_ip or not port:
                self.logger.error(f"‚ùå No multicast info for {room_id}")
                return False
                
            # KI·ªÇM TRA V√Ä T·∫†O MULTICAST SOCKET N·∫æU CH∆ØA C√ì
            if not self.multicast_manager.is_room_active(room_id):
                self.logger.info(f"üîß Auto-setting up multicast for {room_id} at {multicast_ip}:{port}")
                success = await self.setup_room_multicast(room_id, multicast_ip, port)
                
                if success:
                    self.logger.info(f"‚úÖ Auto-setup multicast successful for {room_id}")
                    return True
                else:
                    self.logger.error(f"‚ùå Auto-setup multicast failed for {room_id}")
                    return False
            else:
                self.logger.info(f"‚úÖ Multicast already active for {room_id}")
                return True
                
        except Exception as e:
            self.logger.error(f"‚ùå Error in auto_setup_room_multicast: {e}")
            return False
    async def send_heartbeats(self):
        """G·ª≠i heartbeat ƒë·∫øn c√°c ph√≤ng ƒëang active - GI·∫¢M T·∫¶N SU·∫§T"""
        try:
            # CH·ªà G·ª¨I HEARTBEAT M·ªñI 30 GI√ÇY, KH√îNG PH·∫¢I M·ªñI L·∫¶N L·∫∂P
            current_time = asyncio.get_event_loop().time()
            if hasattr(self, '_last_heartbeat') and current_time - self._last_heartbeat < 30:
                return
                
            self._last_heartbeat = current_time
            
            for room_id in list(self.multicast_manager.groups.keys()):
                room_info = self.room_manager.get_room_info(room_id)
                if room_info and room_info.get('game_started', False):
                    success = self.multicast_manager.send_heartbeat(room_id)
                    
                    if success:
                        self.logger.debug(f"üíì ƒê√£ g·ª≠i heartbeat ƒë·∫øn {room_id}")
                    else:
                        self.logger.error(f"‚ùå L·ªói g·ª≠i heartbeat ƒë·∫øn {room_id}")
                        
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói g·ª≠i heartbeat: {e}")
    
    async def remove_room_multicast(self, room_id: str):
        """D·ªçn d·∫πp multicast socket khi ph√≤ng ƒë√≥ng"""
        try:
            self.multicast_manager.remove_group(room_id)
            self.logger.info(self.formatter.format_system_message(f"ƒê√£ ƒë√≥ng multicast cho {room_id}"))
                
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói ƒë√≥ng multicast cho {room_id}: {e}")
    
    async def cleanup(self):
        """D·ªçn d·∫πp t·∫•t c·∫£ multicast sockets"""
        self.logger.info(self.formatter.format_system_message("ƒêang d·ªçn d·∫πp UDP Handler..."))
        
        self.multicast_manager.cleanup_all_groups()
        
        self.logger.info(self.formatter.format_system_message("UDP Handler ƒë√£ d·ªçn d·∫πp xong"))
    
    def get_multicast_info(self, room_id: str) -> Optional[Dict]:
        """L·∫•y th√¥ng tin multicast c·ªßa ph√≤ng"""
        room_info = self.room_manager.get_room_info(room_id)
        if room_info:
            return {
                "multicast_ip": room_info.get('multicast_ip'),
                "port": room_info.get('port'),
                "has_socket": self.multicast_manager.is_room_active(room_id)
            }
        return None
    
    def get_active_rooms_count(self) -> int:
        """L·∫•y s·ªë l∆∞·ª£ng ph√≤ng ƒëang c√≥ multicast active"""
        return self.multicast_manager.get_active_rooms_count()

    async def broadcast_game_state(self, room_id: str, game_state: dict):
        """Broadcast tr·∫°ng th√°i game ƒë·∫øn ph√≤ng"""
        try:
            packet = PacketFormat.create_packet(
                packet_type="game_state",
                room_id=room_id,
                sender="server",
                target="all",
                action="state_update",
                payload=game_state
            )
            
            await self.broadcast_to_room(room_id, packet)
            self.logger.info(f"üéÆ ƒê√£ broadcast game state ƒë·∫øn {room_id}")
            
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói broadcast game state: {e}")

    async def broadcast_player_joined(self, room_id: str, player_name: str):
        """Broadcast th√¥ng b√°o ng∆∞·ªùi ch∆°i tham gia"""
        try:
            packet = PacketFormat.create_packet(
                packet_type="player_joined",
                room_id=room_id,
                sender="server",
                target="all",
                action="player_joined",
                payload={
                    "player_name": player_name,
                    "timestamp": PacketFormat.generate_timestamp(),
                    "message": f"{player_name} ƒë√£ tham gia ph√≤ng"
                }
            )
            
            await self.broadcast_to_room(room_id, packet)
            
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói broadcast player joined: {e}")

    async def broadcast_player_left(self, room_id: str, player_name: str):
        """Broadcast th√¥ng b√°o ng∆∞·ªùi ch∆°i r·ªùi ƒëi"""
        try:
            packet = PacketFormat.create_packet(
                packet_type="player_left",
                room_id=room_id,
                sender="server",
                target="all",
                action="player_left",
                payload={
                    "player_name": player_name,
                    "timestamp": PacketFormat.generate_timestamp(),
                    "message": f"{player_name} ƒë√£ r·ªùi ph√≤ng"
                }
            )
            
            await self.broadcast_to_room(room_id, packet)
            
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói broadcast player left: {e}")