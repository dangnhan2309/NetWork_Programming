"""X·ª≠ l√Ω k·∫øt n·ªëi TCP t·ª´ client"""
import json
import asyncio
import random
from datetime import datetime, timezone
from typing import Dict, Optional, Callable, List
from ..rooms.room_manager import RoomManager
from ..utils.logger import Logger
from ..utils.formatters import ServerFormatter

class TCPHandler:
    """X·ª≠ l√Ω k·∫øt n·ªëi TCP t·ª´ client"""

    def __init__(self, room_manager, game_manager, logger: Logger, multicast_manager=None):
        self.room_manager = room_manager
        self.game_manager = game_manager
        self.logger = logger
        self.formatter = ServerFormatter()
        self.connected_clients = set() # Ch·ª©a c√°c writer objects
        self.broadcast_callback: Optional[Callable] = None
        self.multicast_manager = multicast_manager
        # Mapping player_name -> writer ƒë·ªÉ g·ª≠i tin nh·∫Øn tr·ª±c ti·∫øp qua TCP (n·∫øu c·∫ßn)
        self.player_to_writer: Dict[str, asyncio.StreamWriter] = {} 

    def set_broadcast_callback(self, callback: Callable):
        """Thi·∫øt l·∫≠p callback ƒë·ªÉ broadcast message (th∆∞·ªùng l√† ƒë·ªÉ g·ª≠i cho to√†n b·ªô server ho·∫∑c ph√≤ng)"""
        self.broadcast_callback = callback
    
    # --- H√†m ti·ªán √≠ch cho TCP/Messaging ---
    
    async def send_response(self, writer: asyncio.StreamWriter, response: Dict):
        """G·ª≠i ph·∫£n h·ªìi JSON qua TCP"""
        try:
            message = json.dumps(response) + '\n' # Th√™m k√Ω t·ª± xu·ªëng d√≤ng ƒë·ªÉ ph√¢n bi·ªát message
            writer.write(message.encode())
            await writer.drain()
            self.logger.debug(f"‚¨ÖÔ∏è G·ª≠i {len(message.encode())} bytes v·ªÅ {writer.get_extra_info('peername')}")
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói g·ª≠i ph·∫£n h·ªìi TCP: {e}")
            
    async def send_to_room(self, room_id: str, message: Dict, exclude_writer: Optional[asyncio.StreamWriter] = None):
        """G·ª≠i tin nh·∫Øn (JSON dict) ƒë·∫øn t·∫•t c·∫£ client trong ph√≤ng qua TCP/Multicast"""
        # ∆Øu ti√™n Multicast n·∫øu c√≥ v√† ph√≤ng ƒëang active
        if self.multicast_manager and self.multicast_manager.is_room_active(room_id):
            # G·ª≠i qua Multicast (gi·∫£ ƒë·ªãnh Multicast Manager s·∫Ω ƒë·ªãnh d·∫°ng message)
            try:
                # T·∫°o packet ƒë∆°n gi·∫£n ƒë·ªÉ multicast (gi·∫£ ƒë·ªãnh client s·∫Ω nh·∫≠n ƒë∆∞·ª£c)
                mc_packet = {
                    "header": {"room_id": room_id, "sender": "SERVER", "type": "COMMAND_BROADCAST", 
                               "timestamp": datetime.now(timezone.utc).isoformat()},
                    "command": {"action": message.get("cmd", "UPDATE")},
                    "payload": message
                }
                await self.multicast_manager.broadcast_to_room(room_id, mc_packet)
                self.logger.debug(f"üìª Multicast broadcasted {message.get('cmd')} to {room_id}")
                return
            except Exception as e:
                self.logger.error(f"‚ùå L·ªói Multicast broadcast: {e}. Falling back to TCP...")

        # Fallback to TCP (ch·ªâ g·ª≠i cho nh·ªØng ng∆∞·ªùi ƒëang k·∫øt n·ªëi qua TCP/Player_to_Writer)
        room_info = self.room_manager.get_room_info(room_id)
        if room_info:
            player_names = room_info.get('players', [])
            for player_name in player_names:
                writer = self.player_to_writer.get(player_name)
                if writer and writer in self.connected_clients and writer != exclude_writer:
                    await self.send_response(writer, message)
    
    async def cleanup_client(self, client_info: Dict, connection_type: str):
        """ƒê√≥ng k·∫øt n·ªëi v√† d·ªçn d·∫πp (r·ªùi ph√≤ng, x√≥a kh·ªèi danh s√°ch)"""
        writer = client_info['writer']
        player_name = client_info.get('player_name')
        room_id = client_info.get('room_id')
        addr = client_info['addr']
        
        # 1. X√≥a kh·ªèi danh s√°ch client
        if writer in self.connected_clients:
            self.connected_clients.remove(writer)
            
        # 2. X√≥a kh·ªèi player_to_writer mapping
        if player_name and self.player_to_writer.get(player_name) == writer:
            del self.player_to_writer[player_name]

        # 3. X·ª≠ l√Ω r·ªùi ph√≤ng
        if room_id and player_name:
            # R·ªùi ph√≤ng trong RoomManager
            await self.room_manager.remove_player(room_id, player_name)
            self.logger.info(f"üö™ {player_name} ƒë√£ r·ªùi ph√≤ng {room_id} do m·∫•t k·∫øt n·ªëi.")
            
            # Broadcast th√¥ng b√°o cho nh·ªØng ng∆∞·ªùi c√≤n l·∫°i
            if self.broadcast_callback:
                await self.broadcast_callback(room_id, f"üö® {player_name} ƒë√£ ng·∫Øt k·∫øt n·ªëi/r·ªùi ph√≤ng!")
        
        # 4. ƒê√≥ng k·∫øt n·ªëi
        try:
            self.logger.info(f"üö´ [H·ªÜ TH·ªêNG] Ng·∫Øt k·∫øt n·ªëi v·ªõi {addr[0]}:{addr[1]}")
            writer.close()
            await writer.wait_closed()
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói ƒë√≥ng k·∫øt n·ªëi: {e}")

    async def start_game_if_ready(self, room_id: str):
        """T·ª± ƒë·ªông b·∫Øt ƒë·∫ßu game khi ƒë·ªß ng∆∞·ªùi"""
        try:
            room_info = self.room_manager.get_room_info(room_id)
            if not room_info:
                self.logger.warning(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y room {room_id}")
                return

            player_count = len(room_info.get('players', []))
            max_players = room_info.get('max_players', 2)
            self.logger.info(f"üë• Room {room_id} c√≥ {player_count}/{max_players} ng∆∞·ªùi ch∆°i")

            if player_count < max_players:
                self.logger.info(f"‚åõ Ch∆∞a ƒë·ªß ng∆∞·ªùi ƒë·ªÉ b·∫Øt ƒë·∫ßu game trong {room_id}")
                return

            if room_info.get('game_started', False):
                self.logger.info(f"‚úÖ Game trong {room_id} ƒë√£ b·∫Øt ƒë·∫ßu tr∆∞·ªõc ƒë√≥.")
                return

            # ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng
            await self.room_manager.start_game(room_id)
            self.logger.info(f"üéÆ Game started for room {room_id}")

            # ‚úÖ Kh·ªüi t·∫°o game logic
            self.game_manager.initialize_game(room_id, room_info['players'])

            # ‚úÖ G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ client trong ph√≤ng
            start_msg = {
                "cmd": "GAME_STARTED",
                "status": "OK",
                "data": {
                    "room_id": room_id,
                    "players": room_info['players'],
                    "message": f"Tr√≤ ch∆°i trong ph√≤ng '{room_info['room_name']}' ƒë√£ b·∫Øt ƒë·∫ßu!"
                }
            }
            await self.send_to_room(room_id, start_msg)

            # ‚úÖ Broadcast h·ªá th·ªëng n·∫øu c·∫ßn
            if self.broadcast_callback:
                await self.broadcast_callback(room_id, "üéÆ TR√í CH∆†I ƒê√É B·∫ÆT ƒê·∫¶U T·ª∞ ƒê·ªòNG!")

            self.logger.info(f"üöÄ Auto-started game in {room_id} (players: {player_count})")

        except Exception as e:
            self.logger.error(f"‚ùå L·ªói auto start game: {e}")

    async def handle_client(self, reader: asyncio.StreamReader, writer: asyncio.StreamWriter):
        """X·ª≠ l√Ω k·∫øt n·ªëi TCP t·ª´ client"""
        try:
            addr = writer.get_extra_info('peername')
            self.logger.info(f"üì¢ [H·ªÜ TH·ªêNG] K·∫øt n·ªëi m·ªõi t·ª´ {addr[0]}:{addr[1]}")

            client_info = {
                'reader': reader,
                'writer': writer,
                'addr': addr,
                'player_name': None,
                'room_id': None
            }
            self.connected_clients.add(writer)

            while True:
                data = await reader.read(1024)
                if not data:
                    break

                message = data.decode().strip()
                self.logger.debug(f"üì® Nh·∫≠n {len(message)} bytes t·ª´ {addr[0]}")

                try:
                    msg_dict = json.loads(message)
                    cmd = msg_dict.get('cmd')
                    request_id = msg_dict.get('request_id')

                    if 'player_name' in msg_dict.get('data', {}):
                        player_name = msg_dict['data']['player_name']
                        client_info['player_name'] = player_name
                        self.player_to_writer[player_name] = writer

                    if cmd == "PING":
                        pong_response = {
                            'cmd': 'PONG',
                            'status': 'OK',
                            'request_id': request_id,
                            'timestamp': datetime.now(timezone.utc).isoformat()
                        }
                        await self.send_response(writer, pong_response)
                        continue

                    response = await self.handle_command(cmd, msg_dict.get('data', {}), client_info, "TCP")
                    if response:
                        await self.send_response(writer, response)

                except json.JSONDecodeError:
                    self.logger.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ parse JSON t·ª´ {addr[0]}: {message}")
                    error_response = {
                        'cmd': 'ERROR',
                        'status': 'ERROR',
                        'message': 'ƒê·ªãnh d·∫°ng JSON kh√¥ng h·ª£p l·ªá'
                    }
                    await self.send_response(writer, error_response)

        except ConnectionResetError:
            self.logger.warning(f"‚ö†Ô∏è M·∫•t k·∫øt n·ªëi ƒë·ªôt ng·ªôt v·ªõi {addr[0] if 'addr' in locals() else 'unknown'}")
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói x·ª≠ l√Ω client {addr[0] if 'addr' in locals() else 'unknown'}: {e}")
            import traceback
            traceback.print_exc()
        finally:
            if 'client_info' in locals():
                await self.cleanup_client(client_info, "TCP")

    async def process_single_message(self, message_str: str, client_info: dict, connection_type: str):
        """X·ª≠ l√Ω m·ªôt message JSON (C√≥ th·ªÉ d√πng cho Websocket/Multicast Receiver)"""
        # ... (Ph·∫ßn code n√†y gi·ªëng h·ªát nh∆∞ b·∫°n ƒë√£ cung c·∫•p) ...
        try:
            data = json.loads(message_str)
            cmd = data.get("cmd")
            payload = data.get("data", {})
            
            self.logger.info(f"üì® Nh·∫≠n t·ª´ {connection_type}: {cmd}")

            if 'player_name' in payload:
                client_info['player_name'] = payload['player_name']
                # C·∫≠p nh·∫≠t mapping n·∫øu c√≥ writer
                if 'writer' in client_info:
                    self.player_to_writer[payload['player_name']] = client_info['writer']

            response = await self.handle_command(cmd, payload, client_info, connection_type)
            
            if response and 'writer' in client_info:
                await self.send_response(client_info['writer'], response)
                
        except json.JSONDecodeError as e:
            self.logger.error(self.formatter.format_error("JSON", str(e)))
            error_response = {
                "cmd": "ERROR", 
                "status": "ERROR", 
                "message": "ƒê·ªãnh d·∫°ng JSON kh√¥ng h·ª£p l·ªá"
            }
            if 'writer' in client_info:
                await self.send_response(client_info['writer'], error_response)
        except Exception as e:
            self.logger.error(self.formatter.format_error("X·ª≠ l√Ω message", str(e)))
            error_response = {
                "cmd": "ERROR", 
                "status": "ERROR", 
                "message": "L·ªói server n·ªôi b·ªô"
            }
            if 'writer' in client_info:
                await self.send_response(client_info['writer'], error_response)

    async def handle_command(self, cmd: str, payload: dict, client_info: dict, connection_type: str) -> Dict:
        """X·ª≠ l√Ω command t·ª´ client"""
        # ... (Ph·∫ßn code n√†y gi·ªëng h·ªát nh∆∞ b·∫°n ƒë√£ cung c·∫•p) ...
        handlers = {
            "LIST_ROOMS": self.handle_list_rooms,
            "JOIN_RANDOM": self.handle_join_random,
            "CREATE_ROOM": self.handle_create_room,
            "JOIN_ROOM": self.handle_join_room,
            "LEAVE_ROOM": self.handle_leave_room,
            "START_GAME": self.handle_start_game,
            "GET_BOARD": self.handle_get_board,
            "ROLL_DICE": self.handle_roll_dice,
            "BUY_PROPERTY": self.handle_buy_property,
            "END_TURN": self.handle_end_turn,          # <-- ƒê√£ th√™m
            "CHAT": self.handle_chat,                  # <-- ƒê√£ th√™m
            "GET_PLAYER_INFO": self.handle_get_player_info, # <-- ƒê√£ th√™m
            "GET_GAME_STATE": self.handle_get_game_state,   # <-- ƒê√£ th√™m
            "PONG": self.handle_pong                   # <-- ƒê√£ th√™m
        }
        
        handler = handlers.get(cmd)
        if handler:
            return await handler(payload, client_info, connection_type)
        else:
            return {
                "cmd": "ERROR", 
                "status": "ERROR", 
                "message": f"L·ªánh kh√¥ng h·ª£p l·ªá: {cmd}"
            }

    # --- C√°c h√†m x·ª≠ l√Ω game/ph√≤ng (B·∫°n ƒë√£ cung c·∫•p) ---
    async def handle_list_rooms(self, payload: dict, client_info: dict, connection_type: str) -> Dict:
        """X·ª≠ l√Ω l·ªánh LIST_ROOMS"""
        # ... (Ph·∫ßn code n√†y gi·ªëng h·ªát nh∆∞ b·∫°n ƒë√£ cung c·∫•p) ...
        try:
            rooms = await self.room_manager.list_rooms()
            return {
                "cmd": "ROOM_LIST", 
                "data": rooms, 
                "status": "OK",
                "message": f"T√¨m th·∫•y {len(rooms)} ph√≤ng"
            }
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói l·∫•y danh s√°ch ph√≤ng: {e}")
            return {
                "cmd": "ROOM_LIST", 
                "status": "ERROR", 
                "message": "Kh√¥ng th·ªÉ l·∫•y danh s√°ch ph√≤ng"
            }

    async def handle_join_random(self, payload: dict, client_info: dict, connection_type: str) -> Dict:
        """X·ª≠ l√Ω tham gia ph√≤ng ng·∫´u nhi√™n"""
        # ... (Ph·∫ßn code n√†y gi·ªëng h·ªát nh∆∞ b·∫°n ƒë√£ cung c·∫•p) ...
        try:
            player_name = payload.get("player_name", f"Player_{client_info['addr'][1]}")
            client_info['player_name'] = player_name
            
            self.logger.info(self.formatter.format_system_message(f"{player_name} ƒëang t√¨m ph√≤ng ng·∫´u nhi√™n..."))
            
            # T√¨m ph√≤ng c√≥ s·∫µn ph√π h·ª£p
            best_room_id = await self.room_manager.find_best_room(player_name)
            
            if best_room_id:
                room_info = await self.room_manager.add_player(best_room_id, player_name)
                if room_info:
                    client_info['room_id'] = best_room_id
                    
                    self.logger.info(self.formatter.format_player_join(
                        player_name, room_info['room_name'], 
                        len(room_info['players']), room_info['max_players']
                    ))
                    
                    # Broadcast th√¥ng b√°o
                    if self.broadcast_callback:
                        await self.broadcast_callback(
                            best_room_id,
                            f"üéä {player_name} ƒë√£ tham gia ph√≤ng! ({len(room_info['players'])}/{room_info['max_players']} ng∆∞·ªùi)"
                        )
                    
                    # Ki·ªÉm tra v√† b·∫Øt ƒë·∫ßu game n·∫øu ƒë·ªß ng∆∞·ªùi
                    if self.room_manager.can_start_game(best_room_id):
                        await self.start_game_if_ready(best_room_id)
                    
                    return {
                        "cmd": "JOIN_SUCCESS", 
                        "status": "OK",
                        "data": room_info,
                        "message": f"ƒê√£ tham gia '{room_info['room_name']}' th√†nh c√¥ng!",
                        "join_type": "EXISTING_ROOM"
                    }
            
            # T·∫°o ph√≤ng m·ªõi n·∫øu kh√¥ng t√¨m th·∫•y
            self.logger.info(self.formatter.format_system_message(f"Kh√¥ng t√¨m th·∫•y ph√≤ng ph√π h·ª£p, ƒëang t·∫°o ph√≤ng m·ªõi cho {player_name}..."))
            room_data = await self.room_manager.auto_create_room(player_name)
            
            if room_data:
                client_info['room_id'] = room_data['room_id']
                room_info = await self.room_manager.add_player(room_data['room_id'], player_name)
                
                self.logger.info(self.formatter.format_room_created(
                    room_data['room_name'], player_name, room_data['max_players']
                ))
                
                # üî• T·∫†O MULTICAST SOCKET CHO PH√íNG M·ªöI (n·∫øu ch∆∞a c√≥)
                if self.multicast_manager:
                    multicast_ip = room_data["multicast_ip"]
                    port = room_data["port"]
                    try:
                        self.multicast_manager.create_group(room_data['room_id'], multicast_ip, port)
                        self.logger.info(f"‚úÖ Multicast socket created for {room_data['room_id']}")
                    except Exception as e:
                        self.logger.error(f"‚ùå Error creating multicast socket: {e}")

                if self.broadcast_callback:
                    await self.broadcast_callback(
                        room_data['room_id'],
                        f"üè† Ph√≤ng '{room_data['room_name']}' ƒë√£ ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông! Ch·ªù ng∆∞·ªùi ch∆°i kh√°c..."
                    )
                
                return {
                    "cmd": "JOIN_SUCCESS", 
                    "status": "OK",
                    "data": room_info,
                    "message": f"ƒê√£ t·∫°o v√† tham gia '{room_data['room_name']}' th√†nh c√¥ng!",
                    "join_type": "NEW_ROOM"
                }
            
            return {
                "cmd": "JOIN_SUCCESS", 
                "status": "ERROR", 
                "message": "Kh√¥ng th·ªÉ t√¨m ho·∫∑c t·∫°o ph√≤ng ph√π h·ª£p"
            }
            
        except Exception as e:
            self.logger.error(self.formatter.format_error("Tham gia ph√≤ng ng·∫´u nhi√™n", str(e)))
            return {
                "cmd": "JOIN_SUCCESS", 
                "status": "ERROR", 
                "message": "L·ªói khi tham gia ph√≤ng ng·∫´u nhi√™n"
            }

    async def handle_create_room(self, payload: dict, client_info: dict, connection_type: str) -> Dict:
        """X·ª≠ l√Ω t·∫°o ph√≤ng m·ªõi - T·∫†O MULTICAST SOCKET NGAY"""
        # ... (Ph·∫ßn code n√†y gi·ªëng h·ªát nh∆∞ b·∫°n ƒë√£ cung c·∫•p) ...
        try:
            room_name = payload.get("room_name", f"Room-{len(self.room_manager.rooms)}")
            player_name = payload.get("player_name", "UnknownPlayer")
            max_players = payload.get("max_players", 4)
            
            # T·∫°o room ID
            room_id = f"ROOM_{len(self.room_manager.rooms)}_{id(client_info['writer'])}"
            
            self.logger.info(f"üè† {player_name} ƒëang t·∫°o ph√≤ng: {room_name}")
            
            # T·∫°o ph√≤ng
            room_info = await self.room_manager.create_room(
                room_id=room_id,
                room_name=room_name,
                host_name=player_name,
                max_players=max_players
            )

            if room_info:
                client_info['player_name'] = player_name
                client_info['room_id'] = room_id
                
                # üî• QUAN TR·ªåNG: T·∫†O MULTICAST SOCKET NGAY KHI T·∫†O PH√íNG
                if self.multicast_manager:
                    multicast_ip = room_info["multicast_ip"]
                    port = room_info["port"]
                    
                    self.logger.info(f"üîß Creating multicast socket for {room_id} at {multicast_ip}:{port}")
                    
                    try:
                        # T·∫°o multicast socket
                        group_info = self.multicast_manager.create_group(room_id, multicast_ip, port)
                        if group_info:
                            self.logger.info(f"‚úÖ Multicast socket created for {room_id}")
                        else:
                            self.logger.error(f"‚ùå Failed to create multicast socket for {room_id}")
                    except Exception as e:
                        self.logger.error(f"‚ùå Error creating multicast socket: {e}")
                else:
                    self.logger.warning(f"‚ö†Ô∏è No multicast manager available for {room_id}")
                
                # ƒê·∫£m b·∫£o room_info c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin
                room_info['host_name'] = player_name
                room_info['is_host'] = True
                
                self.logger.info(f"‚úÖ Room created: {room_name}, Host: {player_name}")
                
                if self.broadcast_callback:
                    await self.broadcast_callback(
                        room_id,
                        f"üéÆ Ph√≤ng '{room_name}' ƒë√£ ƒë∆∞·ª£c t·∫°o b·ªüi {player_name}"
                    )
                
                return {
                    "cmd": "ROOM_CREATED",
                    "data": room_info,
                    "status": "OK",
                    "message": f"ƒê√£ t·∫°o ph√≤ng '{room_name}' th√†nh c√¥ng!"
                }
            else:
                return {
                    "cmd": "ROOM_CREATED",
                    "status": "ERROR",
                    "message": "Kh√¥ng th·ªÉ t·∫°o ph√≤ng"
                }
                
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói t·∫°o ph√≤ng: {e}")
            return {
                "cmd": "ROOM_CREATED",
                "status": "ERROR",
                "message": "L·ªói khi t·∫°o ph√≤ng"
            }

    async def handle_join_room(self, payload: dict, client_info: dict, connection_type: str) -> Dict:
        """X·ª≠ l√Ω tham gia ph√≤ng c·ª• th·ªÉ - ƒê√É S·ª¨A HOST INFO"""
        # ... (Ph·∫ßn code n√†y gi·ªëng h·ªát nh∆∞ b·∫°n ƒë√£ cung c·∫•p) ...
        try:
            room_id = payload.get("room_id")
            player_name = payload.get("player_name", f"Player_{client_info['addr'][1]}")
            
            if not room_id:
                return {
                    "cmd": "JOIN_SUCCESS", 
                    "status": "ERROR", 
                    "message": "Vui l√≤ng cung c·∫•p m√£ ph√≤ng"
                }
            
            client_info['player_name'] = player_name
            
            # R·ªùi ph√≤ng c≈© n·∫øu c√≥
            old_room_id = client_info.get('room_id')
            if old_room_id and old_room_id != room_id:
                await self.room_manager.remove_player(old_room_id, player_name)
                if self.broadcast_callback:
                    await self.broadcast_callback(old_room_id, f"üëã {player_name} ƒë√£ r·ªùi ph√≤ng")
            
            if room_id in self.room_manager.rooms:
                room_info = await self.room_manager.add_player(room_id, player_name)
                if room_info:
                    client_info['room_id'] = room_id

                    is_host = (room_info.get('host_name') == player_name)
                    room_info['is_host'] = is_host

                    # SETUP MULTICAST KHI JOIN PH√íNG (ƒê·∫£m b·∫£o group ƒë√£ ƒë∆∞·ª£c t·∫°o)
                    if self.multicast_manager:
                        multicast_ip = room_info.get("multicast_ip")
                        port = room_info.get("port")
                        if multicast_ip and port:
                             self.multicast_manager.create_group(room_id, multicast_ip, port) # ƒê·∫£m b·∫£o group t·ªìn t·∫°i
                             self.logger.info(f"‚úÖ Multicast group confirmed/created for {room_id}")

                    if room_info.get('game_started', False):
                        if not self.game_manager.is_player_in_game(room_id, player_name):
                            self.game_manager.add_player_to_game(room_id, player_name)

                    self.logger.info(f"üéâ {player_name} tham gia ph√≤ng: {room_info['room_name']} - Host: {is_host}")
                    if self.broadcast_callback:
                        await self.broadcast_callback(
                            room_id,
                            f"üéä {player_name} ƒë√£ tham gia ph√≤ng! ({len(room_info['players'])}/{room_info['max_players']} ng∆∞·ªùi)"
                        )
                    
                    # Ki·ªÉm tra v√† b·∫Øt ƒë·∫ßu game n·∫øu ƒë·ªß ng∆∞·ªùi
                    if self.room_manager.can_start_game(room_id):
                        await self.start_game_if_ready(room_id)
                    
                    return {
                        "cmd": "JOIN_SUCCESS", 
                        "status": "OK",
                        "data": room_info,
                        "message": f"ƒê√£ tham gia ph√≤ng '{room_info['room_name']}' th√†nh c√¥ng!"
                    }
                else:
                    return {
                        "cmd": "JOIN_SUCCESS", 
                        "status": "ERROR", 
                        "message": "Ph√≤ng ƒë√£ ƒë·∫ßy ho·∫∑c c√≥ l·ªói x·∫£y ra"
                    }
            else:
                rooms = await self.room_manager.list_rooms()
                available_rooms = list(rooms.keys())
                return {
                    "cmd": "ERROR", 
                    "status": "ERROR", 
                    "message": f"Kh√¥ng t√¨m th·∫•y ph√≤ng '{room_id}'. C√°c ph√≤ng c√≥ s·∫µn: {', '.join(available_rooms[:3])}..."
                }
                
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói tham gia ph√≤ng: {e}")
            return {
                "cmd": "JOIN_SUCCESS", 
                "status": "ERROR", 
                "message": "L·ªói khi tham gia ph√≤ng"
            }

    async def handle_leave_room(self, payload: dict, client_info: dict, connection_type: str) -> Dict:
        """X·ª≠ l√Ω r·ªùi ph√≤ng"""
        # ... (Ph·∫ßn code n√†y gi·ªëng h·ªát nh∆∞ b·∫°n ƒë√£ cung c·∫•p) ...
        try:
            room_id = payload.get("room_id") or client_info.get('room_id')
            player_name = payload.get("player_name") or client_info.get('player_name')
            
            if room_id and player_name:
                success = await self.room_manager.remove_player(room_id, player_name)
                
                if success:
                    client_info['room_id'] = None
                    
                    if self.broadcast_callback:
                        await self.broadcast_callback(room_id, f"üëã {player_name} ƒë√£ r·ªùi ph√≤ng")
                    
                    return {
                        "cmd": "LEAVE_RESULT", 
                        "status": "OK",
                        "message": "ƒê√£ r·ªùi ph√≤ng th√†nh c√¥ng"
                    }
            
            return {
                "cmd": "LEAVE_RESULT", 
                "status": "ERROR", 
                "message": "L·ªói khi r·ªùi ph√≤ng (Ph√≤ng ho·∫∑c t√™n ng∆∞·ªùi ch∆°i kh√¥ng h·ª£p l·ªá)"
            }
                
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói r·ªùi ph√≤ng: {e}")
            return {
                "cmd": "LEAVE_RESULT", 
                "status": "ERROR", 
                "message": "L·ªói khi r·ªùi ph√≤ng"
            }

    async def broadcast_game_state(self, room_id: str):
        """Broadcast game state qua multicast ho·∫∑c TCP"""
        # ... (Ph·∫ßn code n√†y gi·ªëng h·ªát nh∆∞ b·∫°n ƒë√£ cung c·∫•p) ...
        try:
            game_state = self.game_manager.get_game_state(room_id)
            if not game_state:
                self.logger.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y game state cho ph√≤ng {room_id}")
                return

            state_update_msg = {
                "cmd": "STATE_UPDATE",
                "status": "OK",
                "data": game_state,
                "message": "C·∫≠p nh·∫≠t tr·∫°ng th√°i game"
            }
            
            # G·ª≠i qua Multicast (∆Øu ti√™n)
            if self.multicast_manager and self.multicast_manager.is_room_active(room_id):
                mc_packet = {
                    "header": {
                        "room_id": room_id,
                        "sender": "SERVER",
                        "type": "STATE",
                        "timestamp": datetime.now(timezone.utc).isoformat()
                    },
                    "command": {
                        "action": "STATE_UPDATE"
                    },
                    "payload": {
                        "data": game_state
                    }
                }
                await self.multicast_manager.broadcast_to_room(room_id, mc_packet)
                self.logger.debug(f"üìª Multicast broadcasted STATE_UPDATE to {room_id}")
            
            # G·ª≠i qua TCP cho t·∫•t c·∫£ client trong ph√≤ng (Fallback/TCP-Only)
            await self.send_to_room(room_id, state_update_msg) 

        except Exception as e:
            self.logger.error(f"‚ùå L·ªói broadcast game state: {e}")
            

    async def handle_start_game(self, payload: dict, client_info: dict, connection_type: str) -> Dict:
        """X·ª≠ l√Ω b·∫Øt ƒë·∫ßu game - ƒê√É S·ª¨A ƒê·ªÇ KH·ªûI T·∫†O STATE V√Ä X·ª¨ L√ù RESPONSE CH√çNH X√ÅC"""
        # ... (Ph·∫ßn code n√†y gi·ªëng h·ªát nh∆∞ b·∫°n ƒë√£ cung c·∫•p) ...
        try:
            room_id = payload.get("room_id") or client_info.get('room_id')
            player_name = payload.get("player_name") or client_info.get('player_name')
            
            if not room_id:
                return {"cmd": "START_GAME", "status": "ERROR", "message": "B·∫°n ch∆∞a tham gia ph√≤ng n√†o"}
            
            room_info = self.room_manager.get_room_info(room_id)
            if not room_info:
                return {"cmd": "START_GAME", "status": "ERROR", "message": "Kh√¥ng t√¨m th·∫•y th√¥ng tin ph√≤ng"}
            
            # üî• Ki·ªÉm tra game ƒë√£ b·∫Øt ƒë·∫ßu (TR·∫¢ V·ªÄ OK ƒê·ªÇ TR√ÅNH TIMEOUT)
            if room_info.get('game_started', False):
                return {
                    "cmd": "START_GAME", 
                    "status": "OK", 
                    "message": "Game ƒë√£ ƒë∆∞·ª£c b·∫Øt ƒë·∫ßu tr∆∞·ªõc ƒë√≥! (t·ª± ƒë·ªông khi ƒë·ªß ng∆∞·ªùi)",
                    "data": {"already_started": True, "room_id": room_id}
                }
            
            # Ki·ªÉm tra quy·ªÅn host
            if room_info.get('host_name') != player_name:
                return {"cmd": "START_GAME", "status": "ERROR", "message": "Ch·ªâ ch·ªß ph√≤ng m·ªõi c√≥ th·ªÉ b·∫Øt ƒë·∫ßu game"}
            
            # Ki·ªÉm tra s·ªë l∆∞·ª£ng ng∆∞·ªùi ch∆°i (c√≥ th·ªÉ ƒë∆∞·ª£c x·ª≠ l√Ω trong room_manager.start_game)
            if len(room_info.get('players', [])) < 2:
                return {"cmd": "START_GAME", "status": "ERROR", "message": "C·∫ßn √≠t nh·∫•t 2 ng∆∞·ªùi ch∆°i ƒë·ªÉ b·∫Øt ƒë·∫ßu game"}
            
            
            # üî• B∆Ø·ªöC QUAN TR·ªåNG: KH·ªûI T·∫†O GAME STATE ·ªû ƒê√ÇY
            # L·ªói 'player_name is not defined' x·∫£y ra trong get_initial_state_for_room/initialize_game
            # Sau khi s·ª≠a l·ªói n√†y trong module Game Manager, code n√†y s·∫Ω ch·∫°y ƒë√∫ng:
            initial_state = None
            if hasattr(self.game_manager, 'get_initial_state_for_room'):
                 self.logger.info(f"üöÄ ƒêang kh·ªüi t·∫°o game state cho ph√≤ng {room_id}...")
                 # Gi·∫£ ƒë·ªãnh game_manager.get_initial_state_for_room t·ªìn t·∫°i v√† ho·∫°t ƒë·ªông
                 initial_state = await self.game_manager.get_initial_state_for_room(room_id, room_info['players'])
            else:
                 self.logger.error("Server thi·∫øu module Game Manager/Session ƒë·ªÉ kh·ªüi t·∫°o state.")
                 
            # üî• G·ªåI ROOM MANAGER V√Ä X·ª¨ L√ù K·∫æT QU·∫¢ DICT
            result = await self.room_manager.start_game(room_id, initial_state=initial_state)

            if result["success"]:
                # Game kh·ªüi ƒë·ªông th√†nh c√¥ng
                if self.broadcast_callback:
                    await self.broadcast_callback(room_id, f"üéÆ TR√í CH∆†I ƒê√É B·∫ÆT ƒê·∫¶U! (Game State kh·ªüi t·∫°o: {initial_state is not None})")
                
                # Broadcas state ƒë·∫ßu ti√™n
                await self.broadcast_game_state(room_id)

                return {
                    "cmd": "START_GAME", 
                    "status": "OK",
                    "message": result["message"], # D√πng message t·ª´ RoomManager (ƒê√£ b·∫Øt ƒë·∫ßu th√†nh c√¥ng!)
                    "data": {
                        "room_id": room_id, 
                        "players": room_info['players'],
                        "already_started": False 
                    }
                }
            else:
                # Game kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu (ch∆∞a ƒë·ªß ng∆∞·ªùi/l·ªói kh√°c)
                return {
                    "cmd": "START_GAME", 
                    "status": "ERROR", 
                    "message": result["message"] # D√πng message t·ª´ RoomManager (Ch∆∞a ƒë·ªß ng∆∞·ªùi ch∆°i...)
                }
                
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói nghi√™m tr·ªçng khi x·ª≠ l√Ω START_GAME: {e}")
            import traceback
            self.logger.error(traceback.format_exc())
            return {
                "cmd": "START_GAME", 
                "status": "ERROR", 
                "message": f"L·ªói Server n·ªôi b·ªô khi b·∫Øt ƒë·∫ßu game: {e}"
            }

    async def handle_get_board(self, payload: dict, client_info: dict, connection_type: str) -> Dict:
        """X·ª≠ l√Ω l·∫•y th√¥ng tin b√†n c·ªù"""
        # ... (Ph·∫ßn code n√†y gi·ªëng h·ªát nh∆∞ b·∫°n ƒë√£ cung c·∫•p) ...
        try:
            room_id = client_info.get('room_id')
            
            if not room_id:
                return {
                    "cmd": "GET_BOARD", 
                    "status": "ERROR", 
                    "message": "B·∫°n ch∆∞a tham gia ph√≤ng n√†o"
                }
            
            board_display = self.game_manager.display_board(room_id)
            
            return {
                "cmd": "GET_BOARD", 
                "status": "OK",
                "data": {
                    "board": board_display,
                    "room_id": room_id
                },
                "message": "ƒê√£ l·∫•y th√¥ng tin b√†n c·ªù th√†nh c√¥ng"
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói l·∫•y b√†n c·ªù: {e}")
            return {
                "cmd": "GET_BOARD", 
                "status": "ERROR", 
                "message": "L·ªói khi l·∫•y th√¥ng tin b√†n c·ªù"
            }

    async def handle_roll_dice(self, payload: dict, client_info: dict, connection_type: str) -> Dict:
        """X·ª≠ l√Ω tung x√∫c x·∫Øc - ƒê√É S·ª¨A L·ªñI CRASH"""
        # ... (Ph·∫ßn code n√†y gi·ªëng h·ªát nh∆∞ b·∫°n ƒë√£ cung c·∫•p) ...
        try:
            room_id = client_info.get('room_id')
            player_name = client_info.get('player_name')
            
            if not room_id or not player_name:
                 return {
                    "cmd": "ROLL_DICE", 
                    "status": "ERROR", 
                    "message": "B·∫°n ch∆∞a tham gia ph√≤ng n√†o ho·∫∑c thi·∫øu t√™n ng∆∞·ªùi ch∆°i"
                }
            
            # Ki·ªÉm tra game ƒë√£ b·∫Øt ƒë·∫ßu ch∆∞a
            room_info = self.room_manager.get_room_info(room_id)
            if not room_info or not room_info.get('game_started', False):
                return {
                    "cmd": "ROLL_DICE", 
                    "status": "ERROR", 
                    "message": "Game ch∆∞a b·∫Øt ƒë·∫ßu"
                }
            
            # Ki·ªÉm tra l∆∞·ª£t c·ªßa ng∆∞·ªùi ch∆°i
            if not self.game_manager.is_player_turn(room_id, player_name):
                current_turn = self.game_manager.get_current_turn_player(room_id)
                return {
                    "cmd": "ROLL_DICE", 
                    "status": "ERROR", 
                    "message": f"Ch∆∞a ƒë·∫øn l∆∞·ª£t c·ªßa b·∫°n. L∆∞·ª£t c·ªßa: {current_turn}"
                }
            
            # üî• S·ª¨A: S·ª≠ d·ª•ng game_manager thay v√¨ game_session tr·ª±c ti·∫øp
            dice_result = self.game_manager.roll_dice(room_id, player_name)
            
            if dice_result and dice_result.get('success', False):
                dice1 = dice_result.get('dice1', 0)
                dice2 = dice_result.get('dice2', 0)
                total = dice1 + dice2
                new_position = dice_result.get('new_position', 0)
                
                # Broadcast k·∫øt qu·∫£
                if self.broadcast_callback:
                    await self.broadcast_callback(
                        room_id,
                        f"üé≤ {player_name} tung x√∫c x·∫Øc: {dice1} + {dice2} = {total} ‚Üí ƒê·∫øn √¥ {new_position}"
                    )
                
                # üî• TH√äM: Broadcast state update
                await self.broadcast_game_state(room_id)
                
                return {
                    "cmd": "ROLL_DICE", 
                    "status": "OK",
                    "data": {
                        "dice1": dice1,
                        "dice2": dice2,
                        "total": total,
                        "player": player_name,
                        "new_position": new_position,
                        "tile_info": dice_result.get('tile_info', {})
                    },
                    "message": f"Tung x√∫c x·∫Øc: {dice1} + {dice2} = {total}. {dice_result.get('action_message', '')}"
                }
            else:
                return {
                    "cmd": "ROLL_DICE", 
                    "status": "ERROR", 
                    "message": dice_result.get('message', 'L·ªói khi tung x√∫c x·∫Øc')
                }
                
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói tung x√∫c x·∫Øc: {e}")
            import traceback
            traceback.print_exc()
            return {
                "cmd": "ROLL_DICE", 
                "status": "ERROR", 
                "message": "L·ªói server khi tung x√∫c x·∫Øc"
            }

    async def handle_buy_property(self, payload: dict, client_info: dict, connection_type: str) -> Dict:
        """X·ª≠ l√Ω mua t√†i s·∫£n"""
        # ... (Ph·∫ßn code b·∫°n ƒë√£ cung c·∫•p, ƒë∆∞·ª£c ti·∫øp t·ª•c)
        try:
            room_id = client_info.get('room_id')
            player_name = client_info.get('player_name')
            property_id = payload.get("property_id")
            
            if not room_id or not player_name:
                return {
                    "cmd": "BUY_PROPERTY", 
                    "status": "ERROR", 
                    "message": "B·∫°n ch∆∞a tham gia ph√≤ng n√†o"
                }
            
            if not property_id:
                return {
                    "cmd": "BUY_PROPERTY", 
                    "status": "ERROR", 
                    "message": "Thi·∫øu m√£ t√†i s·∫£n (property_id)"
                }
            
            # Th·ª±c hi·ªán mua t√†i s·∫£n
            buy_result = self.game_manager.buy_property(room_id, player_name, property_id)
            success = buy_result.get("success", False)
            message = buy_result.get("message", "L·ªói kh√¥ng x√°c ƒë·ªãnh")
            
            if success:
                if self.broadcast_callback:
                    await self.broadcast_callback(
                        room_id,
                        f"üè† {player_name} ƒë√£ mua {buy_result.get('property_name', property_id)} v·ªõi gi√° {buy_result.get('cost', '???')}!"
                    )
                
                # Broadcast state update
                await self.broadcast_game_state(room_id)

                return {
                    "cmd": "BUY_PROPERTY", 
                    "status": "OK",
                    "data": buy_result,
                    "message": message
                }
            else:
                return {
                    "cmd": "BUY_PROPERTY", 
                    "status": "ERROR", 
                    "message": message
                }
                
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói mua t√†i s·∫£n: {e}")
            return {
                "cmd": "BUY_PROPERTY", 
                "status": "ERROR", 
                "message": "L·ªói server khi mua t√†i s·∫£n"
            }
        
    # --- C√°c h√†m x·ª≠ l√Ω game logic c√≤n thi·∫øu ---
    
    async def handle_end_turn(self, payload: dict, client_info: dict, connection_type: str) -> Dict:
        """X·ª≠ l√Ω k·∫øt th√∫c l∆∞·ª£t ch∆°i"""
        try:
            room_id = client_info.get('room_id')
            player_name = client_info.get('player_name')

            if not room_id or not player_name:
                return {"cmd": "END_TURN", "status": "ERROR", "message": "B·∫°n ch∆∞a tham gia ph√≤ng n√†o"}
            
            # Chuy·ªÉn l∆∞·ª£t ch∆°i
            turn_result = self.game_manager.end_turn(room_id, player_name)
            
            if turn_result.get('success', False):
                next_player = turn_result.get('next_player')
                
                if self.broadcast_callback:
                    await self.broadcast_callback(
                        room_id,
                        f"‚û°Ô∏è {player_name} ƒë√£ k·∫øt th√∫c l∆∞·ª£t. L∆∞·ª£t c·ªßa **{next_player}**!"
                    )
                
                # Broadcast state update
                await self.broadcast_game_state(room_id)
                
                return {
                    "cmd": "END_TURN", 
                    "status": "OK",
                    "data": turn_result,
                    "message": f"ƒê√£ chuy·ªÉn l∆∞·ª£t th√†nh c√¥ng sang {next_player}"
                }
            else:
                return {
                    "cmd": "END_TURN", 
                    "status": "ERROR", 
                    "message": turn_result.get('message', 'Kh√¥ng th·ªÉ k·∫øt th√∫c l∆∞·ª£t. C√≥ th·ªÉ ch∆∞a ƒë·∫øn l∆∞·ª£t b·∫°n ho·∫∑c b·∫°n ch∆∞a tung x√∫c x·∫Øc.')
                }

        except Exception as e:
            self.logger.error(f"‚ùå L·ªói k·∫øt th√∫c l∆∞·ª£t: {e}")
            return {"cmd": "END_TURN", "status": "ERROR", "message": "L·ªói server khi k·∫øt th√∫c l∆∞·ª£t"}

    async def handle_chat(self, payload: dict, client_info: dict, connection_type: str) -> Dict:
        """X·ª≠ l√Ω tin nh·∫Øn chat"""
        try:
            room_id = client_info.get('room_id')
            player_name = client_info.get('player_name')
            message = payload.get('message')

            if not room_id or not player_name:
                return {"cmd": "CHAT", "status": "ERROR", "message": "B·∫°n ch∆∞a tham gia ph√≤ng n√†o"}
            
            if not message or not isinstance(message, str):
                return {"cmd": "CHAT", "status": "ERROR", "message": "Tin nh·∫Øn kh√¥ng h·ª£p l·ªá"}

            # T·∫°o g√≥i tin chat ƒë·ªÉ broadcast
            chat_message = {
                "cmd": "CHAT_MESSAGE",
                "status": "OK",
                "data": {
                    "player_name": player_name,
                    "room_id": room_id,
                    "message": message,
                    "timestamp": datetime.now(timezone.utc).isoformat()
                }
            }
            
            # G·ª≠i tin nh·∫Øn ƒë·∫øn t·∫•t c·∫£ ng∆∞·ªùi ch∆°i trong ph√≤ng
            await self.send_to_room(room_id, chat_message)
            
            self.logger.info(f"üí¨ [CHAT - {room_id}] {player_name}: {message}")

            # G·ª≠i ph·∫£n h·ªìi th√†nh c√¥ng (kh√¥ng c·∫ßn ph·∫£n h·ªìi ri√™ng cho chat)
            return {"cmd": "CHAT", "status": "OK", "message": "ƒê√£ g·ª≠i tin nh·∫Øn"}

        except Exception as e:
            self.logger.error(f"‚ùå L·ªói x·ª≠ l√Ω chat: {e}")
            return {"cmd": "CHAT", "status": "ERROR", "message": "L·ªói server khi g·ª≠i chat"}

    def make_response(cmd: str, status: str = "OK", data: dict = None, message: str = "") -> Dict:
        """H√†m ti·ªán √≠ch ƒë·ªÉ chu·∫©n h√≥a response g·ª≠i v·ªÅ client"""
        return {"cmd": cmd, "status": status, "data": data, "message": message}


    async def handle_get_player_info(self, payload: dict, client_info: dict, connection_type: str) -> Dict:
        """L·∫•y th√¥ng tin ng∆∞·ªùi ch∆°i hi·ªán t·∫°i trong ph√≤ng"""
        try:
            room_id = client_info.get('room_id')
            player_name = client_info.get('player_name')
            
            if not room_id or not player_name or not player_name.strip():
                return make_response("GET_PLAYER_INFO", "ERROR", None, "B·∫°n ch∆∞a tham gia ph√≤ng n√†o")

            # L·∫•y th√¥ng tin t·ª´ game_manager
            player_info = self.game_manager.get_player_info(room_id, player_name)
            if not player_info:
                return make_response("GET_PLAYER_INFO", "ERROR", None, "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi ch∆°i")

            return make_response("GET_PLAYER_INFO", "OK", player_info, f"Th√¥ng tin ng∆∞·ªùi ch∆°i {player_name}")

        except Exception as e:
            self.logger.error(f"‚ùå L·ªói l·∫•y th√¥ng tin ng∆∞·ªùi ch∆°i: {e}\n{traceback.format_exc()}")
            return make_response("GET_PLAYER_INFO", "ERROR", None, "L·ªói server khi l·∫•y th√¥ng tin ng∆∞·ªùi ch∆°i")


    async def handle_get_game_state(self, payload: dict, client_info: dict, connection_type: str) -> Dict:
        """X·ª≠ l√Ω l·∫•y to√†n b·ªô tr·∫°ng th√°i game (board, players, current_turn)"""
        try:
            room_id = client_info.get('room_id')

            if not room_id:
                return make_response("GET_GAME_STATE", "ERROR", None, "B·∫°n ch∆∞a tham gia ph√≤ng n√†o")

            # L·∫•y to√†n b·ªô tr·∫°ng th√°i game t·ª´ Game Manager
            game_state = self.game_manager.get_game_state(room_id)
            
            if not game_state:
                # N·∫øu game ch∆∞a b·∫Øt ƒë·∫ßu, c√≥ th·ªÉ tr·∫£ v·ªÅ tr·∫°ng th√°i r·ªóng ƒë·ªÉ client x·ª≠ l√Ω
                empty_state = {"players": [], "board": {}, "current_turn": None}
                return make_response("GET_GAME_STATE", "OK", empty_state, "Game ch∆∞a b·∫Øt ƒë·∫ßu ho·∫∑c ch∆∞a c√≥ tr·∫°ng th√°i")

            return make_response("GAME_STATE", "OK", game_state, "Tr·∫°ng th√°i game hi·ªán t·∫°i")

        except Exception as e:
            self.logger.error(f"‚ùå L·ªói l·∫•y tr·∫°ng th√°i game: {e}\n{traceback.format_exc()}")
            return make_response("GET_GAME_STATE", "ERROR", None, "L·ªói server khi l·∫•y tr·∫°ng th√°i game")
